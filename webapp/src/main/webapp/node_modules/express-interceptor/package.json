{
  "name": "express-interceptor",
  "version": "1.2.0",
  "description": "A tiny interceptor for Express responses",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "author": {
    "name": "AxiomZen",
    "url": "https://axiomzen.co"
  },
  "keywords": [
    "express",
    "expressjs",
    "middleware",
    "modify",
    "response",
    "hack",
    "interceptor",
    "hijack",
    "hijackresponse"
  ],
  "contributors": [
    {
      "name": "Fabiano P Soriani",
      "email": "fabianosoriani@gmail.com",
      "url": "https://github.com/flockonus"
    },
    {
      "name": "Raul Pino",
      "email": "ipinoraul@gmail.com",
      "url": "https://github.com/p1nox"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/axiomzen/express-interceptor"
  },
  "bugs": {
    "url": "https://github.com/axiomzen/express-interceptor/issues"
  },
  "license": "MIT",
  "devDependencies": {
    "cheerio": "^0.19.0",
    "express": "^4.12.4",
    "jade": "^1.10.0",
    "mocha": "^2.2.5",
    "unexpected": "9.5.0",
    "unexpected-express": "7.7.0"
  },
  "dependencies": {
    "debug": "^2.2.0"
  },
  "readme": "# express-interceptor\n\n_A tiny Express response interceptor_\n\n[![NPM](https://nodei.co/npm/express-interceptor.png)](https://nodei.co/npm/express-interceptor/)\n\n[![Build Status](https://travis-ci.org/axiomzen/express-interceptor.svg)](https://travis-ci.org/axiomzen/express-interceptor) [![Dependencies](https://david-dm.org/axiomzen/express-interceptor.png)](https://david-dm.org/axiomzen/express-interceptor.png)\n<a href=\"https://zenhub.io\"><img src=\"https://raw.githubusercontent.com/ZenHubIO/support/master/zenhub-badge.png\" height=\"18px\"></a>\n\nExpress-interceptor allows you to define a previous step before sending a response. This allows you to do anything you want with the response, such as processing, transforming, replacing, or logging it. Express-interceptor allows you to avoid calling `next()` over and over. Further more, you can avoid managing nested scopes. Using a declarative API, it’s simple to use and maintain.\n\nSome use cases include:\n\n- Transpile custom elements into standard HTML elements.\n- Transform JSX or compile less files on the fly.\n- Store statistics about responses.\n- Set response headers based on tags in the response body.\n- Dynamically inject live-reload scripts to HTML.\n\n## Usage\n\nInstall the package\n\n\n    npm i --save express-interceptor\n\nDefine your interceptor\n\n```javascript\nvar express     = require('express');\nvar cheerio     = require('cheerio');\nvar interceptor = require('express-interceptor');\n\nvar app = express();\n\nvar finalParagraphInterceptor = interceptor(function(req, res){\n  return {\n    // Only HTML responses will be intercepted\n    isInterceptable: function(){\n      return /text\\/html/.test(res.get('Content-Type'));\n    },\n    // Appends a paragraph at the end of the response body\n    intercept: function(body, send) {\n      var $document = cheerio.load(body);\n      $document('body').append('<p>From interceptor!</p>');\n\n      send($document.html());\n    }\n  };\n})\n\n// Add the interceptor middleware\napp.use(finalParagraphInterceptor);\n\napp.use(express.static(__dirname + '/public/'));\n\napp.listen(3000);\n\n```\n\nYou're defining an interceptor that will be executed whenever the response contains html as Content-Type. If this is true, it will append a child at the end of the body. In other words, it will transform the response:\n\n```html\n<html>\n<head></head>\n<body>\n  <p>\"Hello world\"</p>\n</body>\n</html>\n```\n\nInto:\n\n```html\n<html>\n<head></head>\n<body>\n  <p>\"Hello world\"</p>\n  <p>From interceptor!</p>\n</body>\n</html>\n```\n\nSee [more examples](https://github.com/axiomzen/express-interceptor/tree/master/examples). Also, you can debug express-interceptor actions using [debug](https://github.com/visionmedia/debug) env variable `DEBUG=express-interceptor`.\n\n## API\n\n* `isInterceptable()` (required): is a predicate function where you define a condition whether or not to intercept a response. Returning `true` buffers the request, and proceeds calling `intercept()` as well as `afterSend()`. Typically, you want to check for this condition in the `res` object in the definition of the middleware.\n\n* `intercept(body, send)` (required): Parse the body as an encoded string. After processing the body, call `send(newBody)` with the content to be sent back to the client.\n\n* `afterSend(oldBody, newBody)`: This method will be called after sending the response to the client – after the `done()` callback in the `send()` method is executed. This method would typically be used to cache something, log stats, fire a job, among other things.\n\n## Who is using it?\n\n* [node-stylus-require](https://www.npmjs.com/package/node-stylus-require)\n* [express-html-minify](https://www.npmjs.com/package/express-html-minify)\n* [express-jare](https://www.npmjs.com/package/express-jare)\n* [hospitalrun-server-routes](https://www.npmjs.com/package/hospitalrun-server-routes)\n\n## Similar to\n\n- [express-hijackresponse](https://github.com/papandreou/express-hijackresponse)\nDifferent API, using callbacks with no top down structure, more obtrusive to HTTP internals.\n\n- [hijackresponse](https://github.com/gustavnikolaj/hijackresponse)\nAttempting to solve same problems than `express-hijackresponse`. Different API using pipes, recommended if you have problems with [streaming](https://github.com/axiomzen/express-interceptor/issues/15) or if you need more control over responses.\n\n- [tamper](https://github.com/fgnass/tamper)\nSimilar functionality but different internals and API.\n\n## Words of advice\n\nIf your `intercept` method make calls to a database, or needs to make expensive transformations to the original response, you should take in account the time that will add to the response. You should define your `isInterceptable` method carefully, checking the type of the response, or even the route that was fired by the request, also you may consider implementing a cache strategy to get faster responses.\n\nIf you face any issue, don't hesitate to submit it [here](https://github.com/axiomzen/express-interceptor/issues).\n\n## Contributing\n\nPlease check [CONTRIBUTING.md](CONTRIBUTING.md).\n\nThis project adheres to the [Open Code of Conduct](http://todogroup.org/opencodeofconduct/#express-interceptor/ipinoraul@gmail.com). By participating, you are expected to honor this code.\n\n## Author\n\n* [AxiomZen](https://www.axiomzen.co/).\n\n## Collaborators\n\n* [Fabiano Soriani](https://github.com/flockonus).\n* [Raul Pino](https://github.com/p1nox).\n\n## License\n\n  [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "express-interceptor@1.2.0",
  "_from": "express-interceptor@^1.2.0"
}
