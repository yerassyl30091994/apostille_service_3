{
  "name": "bower-files",
  "version": "3.14.1",
  "main": "./index",
  "description": "Pulls in dynamic list of filepaths to bower components",
  "files": [
    "bin",
    "index.js",
    "lib"
  ],
  "bin": {
    "bower-files": "bin/bower-files"
  },
  "scripts": {
    "jshint": "jshint --reporter node_modules/jshint-stylish lib/**",
    "check-cov": "istanbul check-coverage --statements 90 --functions 90 --branches 85 --lines 90",
    "test": "istanbul cover _mocha",
    "posttest": " npm run check-cov; npm run jshint;",
    "codeclimate": "cat ./coverage/lcov.info | codeclimate-test-reporter"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ksmithut/bower-files.git"
  },
  "keywords": [
    "bower",
    "task management"
  ],
  "author": {
    "name": "ksmithut"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ksmithut/bower-files/issues"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "codeclimate-test-reporter": "^0.3.3",
    "istanbul": "^0.4.5",
    "jshint": "^2.9.3",
    "jshint-stylish": "^2.2.1",
    "mocha": "^3.0.2",
    "mocha-lcov-reporter": "^1.2.0"
  },
  "dependencies": {
    "arrify": "^1.0.1",
    "bower-config": "^1.4.0",
    "camelcase": "^3.0.0",
    "debug": "^2.2.0",
    "deprecate": "^1.0.0",
    "globby": "^6.0.0",
    "is-absolute": "^0.2.5",
    "is-symlink-sync": "^1.0.2",
    "minimatch": "^3.0.3",
    "object-assign": "^4.1.0",
    "read-json-sync": "^1.1.1",
    "untildify": "^2.1.0",
    "yargs": "^5.0.0"
  },
  "readme": "# bower-files\n\n[![NPM version](http://img.shields.io/npm/v/bower-files.svg?style=flat)](https://www.npmjs.org/package/bower-files)\n[![Dependency Status](http://img.shields.io/david/ksmithut/bower-files.svg?style=flat)](https://david-dm.org/ksmithut/bower-files)\n[![Dev Dependency Status](http://img.shields.io/david/dev/ksmithut/bower-files.svg?style=flat)](https://david-dm.org/ksmithut/bower-files#info=devDependencies&view=table)\n[![Code Climate](http://img.shields.io/codeclimate/github/ksmithut/bower-files.svg?style=flat)](https://codeclimate.com/github/ksmithut/bower-files)\n[![Build Status](http://img.shields.io/travis/ksmithut/bower-files/master.svg?style=flat)](https://travis-ci.org/ksmithut/bower-files)\n[![Coverage Status](http://img.shields.io/codeclimate/coverage/github/ksmithut/bower-files.svg?style=flat)](https://codeclimate.com/github/ksmithut/bower-files)\n\nHelp you dynamically include your bower components into your build process.\n\n**The Problem**\n\nBower is a great tool to bring in your front-end dependencies (and their\ndependencies) to your project. But if you want them to be included in your build\nprocess, you need to manually enter them in to your build process. If you add\nor remove dependencies, you need to modify your build process configuration\nfiles.\n\n**The Solution**\n\n`bower-files` aims to simplify your build process setup by dynamically getting\nthe library files for you to include in whatever build process you use. It\nsplits up the files by extension, and puts them in the order they need to be in,\nin order to work correctly in the browser.\n\n## 3.x\n\nThere are breaking changes in 3.x. A few features were requested, but with the\nway that the code was organized, it was going to be pretty difficult and it\nwould make the codebase even more complicated. In the end, I refactored most\nevery piece to follow a more modular approach. I am much happier with the code\nbase than I was, but it's not perfect. I'm going to be slowly refactoring litte\npieces here and there, but the api should not change much from here.\n\nFor those of you who want the old 2.x api, just use it the same way, but adding\na `.old` before the function call.\n\n```javascript\nvar lib = require('bower-files').old(options);\n```\n\nWith that you get the benefit of using the new modular code, and it still passes\nall of the old tests (which had 100% api and code coverage).\n[2.x Docs](README-2.x.md)\n\n## Installation\n\n```bash\nnpm install bower-files --save-dev\n```\n\n## Usage\n\ngulp example...\n\n```javascript\nvar gulp   = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar lib    = require('bower-files')();\n\ngulp.task('default', function () {\n  gulp.src(lib.ext('js').files)\n    .pipe(concat('lib.min.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('public/js'));\n});\n```\n\nor a grunt example...\n\n```javascript\n\nvar lib = require('bower-files')();\n\nmodule.exports = function (grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      dist: {\n        files: {\n          'build/lib.min.js': lib.ext('js').files\n        }\n      }\n    },\n    cssmin: {\n      dist: {\n        files: {\n          'build/lib.min.css': lib.ext('css').files\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n\n  grunt.registerTask('default', ['uglify', 'cssmin']);\n\n};\n```\n\nor via the CLI (`node-modules/.bin` needs to be in your `PATH`):\n\n```sh\n$ bower-files js css\n```\n\n*Other Solutions*\n\nThere are other modules that do this same thing, but in different ways:\n\n- [`main-bower-files`](https://github.com/ck86/main-bower-files)\n- [`gulp-bower-files`](https://www.npmjs.org/package/gulp-bower-files)\n\n## Options\n\nThe following gives you an instance of your bower files.\n\n```javascript\nvar lib = require('bower-files')(/* options */);\n```\n\nThose options are as follows:\n\n#### `options.cwd` {String}\n\nDefault: `process.cwd()`\n\nYour current working directory where your `bower.json` lives. This is also where\nit will start looking at `.bowerrc`. **MUST** be an absolute path.\n\n#### `options.json` {String}\n\nDefault: `'bower.json'`\n\nThe relative path to your `bower.json`. This is relative to your `options.cwd`.\n\n#### `options.componentJson` {String}\n\nDefault: `'.bower.json'`\n\nWhen you run `bower install jquery` it installs the `jquery` component into a\nfolder `bower_components/jquery/`. In that directory, there is a `.bower.json`\nfile put there by bower, which essentially is a copy of the other `bower.json`,\nbut it's what is officially used by bower. If for some reason you are using a\ndifferent package manager that uses a different file, then you can change it\nwith this option. Otherwise, leave it as is.\n\n#### `options.overrides` {Object}\n\nDefault: `{}`\n\nAn overrides object to override specific package main files. Occasionally,\nyou'll find a bower component that has no defined `main` property. So here, you\npass in an object that looks like this:\n\n```javascript\nvar lib = require('bower-files')({\n  overrides: {\n    jQuery: {\n      main: './dist/jquery.min.js',\n      dependencies: {}\n    }\n  }\n});\n```\n\nNote that you can also add this POJO into `bower.json` in `JSON` form, but if\nyou specify an overrides directly when calling `bower-files`, it will override\nthe `bower.json` version.\n\n#### `options.dir` {String}\n\nDefault: `'bower_components'`\n\nThe directory that your bower_components directory is set. Note that this module\nwill automatically read your `.bowerrc` file, so if you already have it being\nset there, you don't need to set this option. It also follows the same\n`.bowerrc` rules that [bower\nfollows](http://bower.io/docs/config/#placement--order)\n\n#### `options.camelCase` {Boolean}\n\nDefault: `true`\n\nWhen you get a dependency hash using the `.deps`, by default, it will return\nthe components in camelCase. So if you have `angular-route` as a dependency,\nit will be returned in the dependency hash as `angularRoute`. To prevent this\nfrom happening, pass false to this option. Example:\n\n```javascript\nvar lib = require('bower-files')({camelCase: false}).deps;\n\nlib['angular-route']; // instead of lib.angularRoute\n```\n\n## API\n\nGetting the files and filtering through them can be a pain without this module.\nThis API is designed to be easy to understand. If you don't like it, PRs are\nwelcome.\n\nFirst, you need your BowerFiles instance:\n\n```javascript\nvar lib = require('bower-files')();\n```\n\nAt this point, `bower-files` has gotten a list of all the components and their\ndependencies. Now it's up to you to use the API to filter those files.\n\n### Chainable Methods\n\nThe following methods are chainable. At the end, you will need to get the\n`files` property to get the array of files.\n\n```javascript\nlib.files; // returns all of the files\n```\n\nYou may also get the `deps` property, which will be an object hash with all of\nthe bower components as keys. Note that this is not guaranteed to be in the\ncorrect order. If you need the correct order, use the next option.\n\n```javascript\nlib.deps;\n/*\n{\n  jquery: [...],\n  bootstrap: [...]\n}\n*/\n```\n\nYou can also get an array of all of the dependencies with their names and files.\n\n```javascript\nlib.depsArray\n/*\n[\n  {\n    name: 'jquery',\n    files: [...]\n  },\n  {\n    name: 'bootstrap',\n    files: [...]\n  }\n]\n*/\n```\n\n#### `lib.self()`\n\nBy default the array of files you get only contain your dependencies defined in\nthe `dependencies` property in your `bower.json`. This allows you to also get\nthe files defined in the `main` property in your `bower.json`.\n\n```javascript\nlib.self().files;\nlib.self().deps;\n```\n\n#### `lib.relative('/')`\n\nDefault: process.cwd()\n\nConverts the file paths to be relative to the provided path, defaults to process.cwd()\n\n```javascript\nlib.relative(__dirname).files;\n```\n\n#### `lib.main(false)`\n\nDefault: true\n\nThis gives you the ability to remove main dependencies from the file list.\n\n```javascript\nlib.dev().main(false).files;\nlib.dev().main(false).deps;\n```\n\n#### `lib.fileListProps(props, useOne)`\n\nDefault: ['main'], true\n\nThis lets you select which bower properties are used when generating a file list\nfor a component. For example, it seems that the bower standard for lists of\nfiles used by tools like this one is to use the `files` property. You could use\n`lib.fileListProps('files')` to utilize that property instead of the other one.\nYou could also select both: `lib.fileListProps(['files', 'main'])` and it would\nremove the duplicate files that match both the main property definition and the\nfiles property definition (it expands globs and uniquifies the lists)\n\nThe second option allows you to specify whether or not you want it to stop\ntrying to read additional file list properties when it finds one. For example,\nyou may specify `['files', 'main']`, and then `true` as the second option, and\nall components with a `files` property would ignore the 'main' property.\nIf it's set to false, it would include all of the files in the 'main' property.\n\n```javascript\nlib.fileListProps('files').files;\nlib.fileListProps(['files', 'main']).files;\n```\n\n#### `lib.ignoreListProps(props)`\n\nDefault []\n\nThis lets you select which bower properties are used when ignore globs of files.\nThis is to support the bower spec which allows you to use globs in the \"files\"\nproperty, and \"ignore\" which would ignore groups of files that match the\n\"files\" patterns.\n\n```javascript\nlib\n  .fileListProps('files')\n  .ignoreListProps('ignore')\n  .files;\n```\n\n#### `lib.dev()`\n\nThis throws in your `devDependencies`. By default, they come before the normal\ndependencies, but you can put them after by calling `lib.dev('after')`\n\n```javascript\nlib.dev().files;\nlib.dev().deps;\n```\n\n#### `lib.ext('js')`\n\nGives you the files with the given extension(s). Accepts a string, array of\nstrings, or a boolean. The strings are extensions that you would like to filter\nby (without the '.'). If you pass `true`, it will return an object whose\nproperties are all of the extensions.\n\n```javascript\nlib.ext('js').files; // Gets all .js files\nlib.ext(['css', 'less']).files; // Gets all .css and .less files\nlib.ext('css').ext('less').files; // Same as above\nlib.ext(true).files; // Get an object like:\n/*\n{\n  js: ['what.js', 'who.js'],\n  css: ['when.css'],\n  less: ['why.less']\n}\n*/\nlib.ext('js').deps;\n/*\n{\n  jquery: ['/path/to/jquery.js'],\n  bootstrap: ['/path/to/bootstrap.js']\n}\n*/\nlib.ext(true).deps;\n/*\n{\n  jquery: { js: ['/path/to/jquery.js'] },\n  bootstrap: {\n    js: ['/path/to/bootstrap.js'],\n    css: ['/path/to/bootstrap.css'],\n    less: ['/path/to/bootstrap.less'],\n    you get the picture...\n  }\n}\n*/\n```\n\n#### `lib.match('!**/*.min.js')`\n\nAllows you to glob match the files. Accepts a string, or array of strings. The\nfiles have to match all of the given glob strings to make it through.\n\nThe matches are done relative to process.cwd(). So if you wanted to get all of\nthe bootstrap files by matching, you would use `'*/bootstrap/**'` as a pattern.\n\n```javascript\n// Gets all .js files that aren't .min.js files\nlib.match('**/*.js').match('!**/*.min.js').files;\n```\n\n#### `lib.join({font: ['eot', 'woff', 'ttf', 'svg']})`\n\nAllows you to join files of a certain extension into another extension. Accepts\nan object as formed above and in the example below. It's only really useful if\nyou plan on using `.ext(true)` to split by extension, otherwise you can just use\n`lib.ext(['eot', 'woff', 'ttf', 'svg']).files` to get the files you need.\n\n```javascript\n// Gets all the font files, from bootstrap for example\nlib.join({font: ['eot', 'woff', 'ttf', 'svg']}).files\n```\n\n### Non-Chainable\n\nThere's really only one method, and it could be made chainable really easy, but\nthis method is really a catch all of all of the above methods.\n\n#### `lib.filter({/* options */})`\n\nThe object given have all of the above options given through the chainable\nmethods. Below is a full example.\n\n```javascript\nlib.filter({\n  self: true,\n  dev: true,\n  ext: 'js',\n  match: ['!**/*.min.js'],\n  join: {\n    js: ['js', 'jsx']\n  }\n});\n// chainable alternative\nlib.self()\n  .dev()\n  .ext('js')\n  .match('!**/*.min.js')\n  .join({js: ['js', 'jsx']})\n  .files;\n```\n\nThe above returns all of the `.js` files, including the ones in your\n`bower.json`, and the `devDependencies`, and they aren't `min.js` files, and it\njoins all of the 'js' and 'jsx' files into the 'js' extension. That join could\nbe used in the extensions instead, but it's just there to show you how you\nwould do it.\n\n## Questions\n\nI know it's trying to solve for a lot of different use cases, so if you have any\nquestions about how to implement this in your specific setup, feel free to open\nan issue. I usually get back to you pretty quickly, but usually no later than\n24 hours, as long as I have access to email.\n\n## Development\n\nPRs welcome! Make sure you have an updated `npm` or the npm scripts won't work.\nTests that run fail if not all the tests pass, if you don't have 100% coverage,\nor if the code doesn't pass jshint. I'd like to keep everything the same style,\nso feel free to call me out on stuff. If you don't like the coding style, I'm\nopen for a discussion on it.\n\nTo run tests, run `npm test`.\n",
  "readmeFilename": "README.md",
  "_id": "bower-files@3.14.1",
  "dist": {
    "shasum": "396939a871b5ee4f29e1d3d475d1b21825b1fd24"
  },
  "_from": "bower-files@^3.4.4",
  "_resolved": "http://registry.npmjs.org/bower-files/-/bower-files-3.14.1.tgz"
}
