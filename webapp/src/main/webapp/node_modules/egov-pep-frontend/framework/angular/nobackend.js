var restStub = {};
app.run(function ($http, $settings, $httpBackend) {

    if ($settings.isStubbedRest()) {

        var backend = function (method, url, data, headers) {

            if( restStub[url].responseSeq ){
                if( restStub[url].seqId !== undefined ){
                    restStub[url].seqId = (restStub[url].seqId + 1) % restStub[url].responseSeq.length;
                } else {
                    restStub[url].seqId = 0;
                }
            }

            var status = ("status" in restStub[url]) ? restStub[url].status : 200;
            var response = restStub[url].responseSeq ? restStub[url].responseSeq[restStub[url].seqId] : restStub[url].response;
            var header = "header" in restStub[url] ? restStub[url].header : {};
            return [status, response, header];
        };

        $http.get('build/mock.json?v=' + new Date().getTime()).success(function (response) {
            console.info('Заглушка для REST загружена');
            restStub = response;
        }).error(function () {
            console.error('Заглушка для REST должна быть задана в папке услуги (см. поиск по файлу mock.json)');
        });
    }
    $httpBackend.whenGET(/fake.*/).respond(backend);
    $httpBackend.whenPOST(/fake.*/).respond(backend);
});

app.config(function ($httpProvider, $provide) {

    $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
    $provide.decorator('$httpBackend', function ($delegate, $injector) {
        var proxy = function (method, url, data, callback, headers) {
            var interceptor = function () {
                var _this = this,
                    _arguments = arguments;
                if ($injector.get('$settings').isSlowMode()) {
                    setTimeout(function () {
                        callback.apply(_this, _arguments);
                    }, 150);
                } else {
                    callback.apply(_this, _arguments);
                }
            };
            return $delegate.call(this, method, url, data, interceptor, headers);
        };
        for (var key in $delegate) {
            proxy[key] = $delegate[key];
        }
        return proxy;
    });

    $httpProvider.interceptors.push(function ($injector, $q, $error) {
        return {
            'request': function (config) {

                var $router = $injector.get('$router'),
                    $settings = $injector.get('$settings');

                if (config.url.indexOf('rest/') != -1 || config.url.indexOf('fake/') != -1) {


                    if (config.url.indexOf('fake/') != -1 || $settings.isStubbedRest() && restStub) {
                        console.warn("Получен запрос на заглушку", config.url);

                        var fake = config.url.replace('rest/', 'fake/');
                        var search = fake;
                        if (config.method === "GET" && config.params) {
                            var str = [];
                            _.each(_.keys(config.params), function (key) {
                                str.push(key + "=" + config.params[key]);
                            });
                            search += "?" + str.join("&");
                        }
                        if (search in restStub) {
                            console.info('Для запроса на заглушку ' + config.url + ' найден ответ', restStub[search]);
                            config.url = fake;
                        }
                    }

                    if (config.data) {

                        function purge(obj) {
                            _.each(_.keys(obj), function (key) {
                                if (key.indexOf('__persistant') != -1) {
                                    delete obj[key];
                                }
                                if (_.isObject(obj[key])) {
                                    purge(obj[key]);
                                }
                            });
                        }

                        var rq = _.cloneDeep(config.data);
                        purge(rq);
                        config.data = rq;
                    }

                    config.timeout = 60000;
                }

                if (config.method != 'JSONP') {
                    $router.pendingRequests++;
                }
                return config;
            },

            'requestError': function (rejection) {

                var $router = $injector.get('$router');

                if (rejection.config.method != 'JSONP') {
                    $router.pendingRequests--;
                }

                return $q.reject(rejection);
            },

            'response': function (response) {

                var $router = $injector.get('$router');

                if (response.config.method != 'JSONP') {
                    $router.pendingRequests--;
                }

                return response;
            },

            'responseError': function (rejection) {

                var $router = $injector.get('$router'),
                    $settings = $injector.get('$settings'),
                    $sso = $injector.get('$sso');

                console.error("Ошибка при обращении к ", rejection.config.url);

                if (rejection.config.method != 'JSONP') {
                    $router.pendingRequests--;
                }

                if (rejection.status === 403) {
                    //TODO Нужно добавить обработку перехода по указанному url-у только в случае наличия header-а X-Content-Type-Options = PORTAL
                    $sso.goLoginPage(rejection.headers().nl);
                } else if (rejection.status === 500 && rejection.config.url.indexOf('rest/app/v2/verification-types') == -1) {//Если verification-types возвращает 500 то техническую ошибку не кидаем
                    $error.setError('serverError');
                }
                return $q.reject(rejection);
            }
        };
    });
});
