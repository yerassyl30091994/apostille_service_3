var app = angular.module('app', [ 'ui.directives', 'ngMessages', 'ngSanitize', 'ngAnimate', 'ui.router', 'angularFileUpload', 'LocalStorageModule', 'ngCookies', 'tenphi.bem', 'egov.ui.textbox', 'ngMask','angularUtils.directives.dirPagination' ])

    .factory('ResourceProxy', function () {
        return {
            'request': function (config) {
                //config.url = Assembler.url(config.url);
                if(typeof getPlaceId != 'undefined') {
                    var placeId = getPlaceId();
                    if (!!placeId) {
                        config.headers['X-Egov-Client-Id'] = placeId;
                    }
                }
                return config;
            }
        }
    })

    .run([ '$cookie', '$rootScope', '$cookieStore',
        function ($cookie, $rootScope, $cookieStore) {
            $rootScope._ = _;
            $rootScope.$cookieStore = $cookieStore;
        }])
    .config([ "$logProvider", "$httpProvider", "$provide",
        function ($logProvider, $httpProvider, $provide) {

            $logProvider.debugEnabled(true);

            $httpProvider.interceptors.push('ResourceProxy');

            //интерполяция name для вложенных в форму директив, нужно для нормально работающей валидации в компонентах
            $provide.decorator('ngModelDirective', ['$delegate', function ($delegate) {
                var ngModel = $delegate[0], controller = ngModel.controller;
                ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {
                    var $interpolate = $injector.get('$interpolate');
                    attrs.$set('name', $interpolate(attrs.name || '')(scope));
                    $injector.invoke(controller, this, {
                        '$scope': scope,
                        '$element': element,
                        '$attrs': attrs
                    });
                }];
                return $delegate;
            }]);
            $provide.decorator('formDirective', ['$delegate', function ($delegate) {
                var form = $delegate[0], controller = form.controller;
                form.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {
                    var $interpolate = $injector.get('$interpolate');
                    attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));
                    $injector.invoke(controller, this, {
                        '$scope': scope,
                        '$element': element,
                        '$attrs': attrs
                    });
                }];
                return $delegate;
            }]);
        }])
