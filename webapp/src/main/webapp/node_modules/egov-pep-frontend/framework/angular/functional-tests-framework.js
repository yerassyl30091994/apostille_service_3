app.service('functionalTestService', [ '$injector',
    function ($injector) {

        var $declaration, $timeout, $eds, $interval, $router, $http;

        var scenario = [], self = this;


        function waitProcessing(callback) {
            var noRequests = false;
            var interval = $interval(function () {
                if (!noRequests && $router.getNetworkStats().pendingRequests == 0) {
                    noRequests = true;
                    return;
                }
                if (noRequests) {
                    $interval.cancel(interval);
                    callback();
                }
            }, 50);
        }

        //Начать новый сценарий тестирования
        this.resetScenario = function () {
            scenario = [];
            console.log('[FT] Scenario was reset.');
        };

        //Дополнить модель параметрами
        this.updateModel = function (modelUpdate) {
            scenario.push([1000, function () {
                _.assign($declaration.model, modelUpdate);
                console.log('[FT] Model was updated: ', modelUpdate);
            }]);
        };

        //Перейти на следующий шаг
        this.nextStep = function () {
            scenario.push([1000, function () {
                var nextStep = $declaration.getStepByIndex($declaration.currentStep().index + 1);
                if (nextStep) {
                    $declaration.goStep(nextStep);
                    console.log('[FT] Declaration step was changed to: ', nextStep);
                }
            }]);
        };

        //Настроить подписание под использование указанного сертификата
        //JavaPlugin должен быть настроен так чтобы не было запроса на разрешение запуска
        this.setupEds = function (namespace, certFilePath, certPassword) {
            scenario.push([10, function () {
                $eds.addTestFileCert(namespace, certFilePath.replace(/([^:^\/])\/\//g, '$1/'), certPassword);
                console.log('[FT] Test certificate was registered ' + namespace + ':' + certFilePath + ' @ ' + certPassword);
            }]);
        };

        this.assertPredicate = function (predicate, description) {
            scenario.push([10, function () {
                if (!predicate()) {
                    console.error('[FT] Assert failed:\n' + description);
                } else {
                    console.log('[FT] Assert passed (' + description + ')');
                }
            }]);
        };

        var running = false;
        this.startScenario = function () {
            running = true;
            var position = 0;
            $declaration.onReady(function () {
                function play() {
                    if( scenario.length == position ) {
                        running = false;
                        console.log('[FT] Scenario finished');
                    } else {
                        console.log('[FT] Playing scenario step ' + position);
                        scenario[position][1]();
                        console.log('[FT] Waiting until processing is done');
                        waitProcessing(function () {
                            console.log('[FT] Waiting ' + scenario[position][0] + ' ms till next scenario step...');
                            $timeout(play, scenario[position++][0]);
                        });
                    }
                }

                play();
            });
            $declaration.reset();
        };

        this.isRunning = function() { return running; };

        this.tests = [];

        this.loadTests = function (declaration) {
            $declaration = $injector.get('$declaration');
            $timeout = $injector.get('$timeout');
            $eds = $injector.get('$eds');
            $interval = $injector.get('$interval');
            $router = $injector.get('$router');
            $http = $injector.get('$http');

            /*
            $declaration.onReady(function(){
                var declarationCode = $router.getActiveLocation().get().code;
                $http.get('tests/functional/' + declarationCode + '.js').then(function (testScript) {
                    eval(testScript);
                        self.tests = _.filter(window.__functionalTests, function(test){
                            return test.declaration == declarationCode;
                        });
                });
            });*/

            self.tests = [];
        };


        this.runTest = function(name){

            if( running ) {
                console.log('Не могу запустить тест ' + name + ' - в данный момент уже выполняется тест');
                return;
            }

            var tests = _.filter(window.__functionalTests, function(test){
                return test.declaration == $router.getLocation('declaration').get().context && test.name == name;
            });

            if( tests.length == 0 ){
                console.error('Не найден тест с именем ' + name + ' для заявки ' + $router.getLocation('declaration').declarationId);
                return;
            }
            if( tests.length > 1 ){
                console.error('Найден более чем один тест с именем ' + name + ' для заявки ' + $router.getLocation('declaration').declarationId);
                return;
            }

            tests[0].test(this, $injector);

        };


        return _.bindAll(this);
    }]);