app.service('$translate', ['$locales', 'i18n_ru', 'i18n_en', 'i18n_kz', function ($locales, i18n_ru, i18n_en, i18n_kz) {

    var self = this;

    var allLocales = { ru: i18n_ru, kz: i18n_kz, en: i18n_en };
    var linkedScopes = {};
    var aliases = {};

    this.translate = function (key, scope) {
        if (key == null) {
            return "";
        }
        
        var ref = allLocales[$locales.current()];
        _.each(key.split('.'), function (prop) {
            if (ref != null) ref = ref[prop];
        });
        if (!ref) return key;
        if (_.isObject(ref)) {
            console.error(key + ' не является текстовым ресурсом, это объект', ref);
            return key;
        }

        if (ref.indexOf('{') != -1 && ref.indexOf('}') != -1 && !aliases[scope.$id] && !linkedScopes[scope.$id]) {
            var iterScope = scope;
            while (iterScope.$id != '001') {
                var linkScopeId = _.find(_.keys(aliases), function (aliasScopeId) {
                    return iterScope.$id == aliasScopeId;
                });
                if (!linkScopeId) {
                    iterScope = iterScope.$parent;
                } else {
                    linkedScopes[scope.$id] = linkScopeId;
                    break;
                }
            }
        }

        if (scope && (aliases[scope.$id] || aliases[linkedScopes[scope.$id]])) {
            var aliasGroup = aliases[scope.$id] || aliases[linkedScopes[scope.$id]];
            _.each(_.keys(aliasGroup), function (aliasName) {
                if (ref.indexOf('{' + aliasName + '}') != -1) {
                    ref = ref.replaceAll('{' + aliasName + '}', self.translate(aliasGroup[aliasName]()));
                }
            });
        }

        return ref;
    };

    this.alias = function (scope, aliasName, aliasKeyFunction) {
        aliases[scope.$id] = aliases[scope.$id] || {};
        aliases[scope.$id][aliasName] = aliasKeyFunction;
    };

    return this;
}]);
