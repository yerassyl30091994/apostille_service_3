angular.module("app").controller('relationshipDeclarationController', ['$scope', '$http', '$injector', '$rootScope', '$declaration', '$eds', '$robot', '$sound', '$locales', '$session', '$dictionary', '$timeout', '$zags', '$q',
    function ($scope, $http, $injector, $rootScope, $declaration, $eds, $robot, $sound, $locales, $session, $dictionary, $timeout, $zags, $q) {

        $declaration.onLoaded(function () {

            $declaration.init('P3.061', {
                data: {
                    '@declarantUin': '',
                    '@iin': '',
                    '@relationship': "SELF"
                },
                zagsError: null
            });

            $scope.$watch('$declaration.model.data.relationship', function(){
                $declaration.model.zagsError = null;
            });

            $declaration.onStep('sign', function () {
                $declaration.model.zagsError = null;
                $declaration.signByIndividual(function () {
                    var defer = $q.defer();
                    if ($session.operator) {
                        $declaration.model.data.iin = $declaration.model.data.declarantUin;
                        defer.resolve();
                    } else {
                        if ($declaration.model.data.relationship == 'SELF') {
                            $declaration.model.data.iin = $declaration.model.data.declarantUin;
                            defer.resolve();
                        } else if ($declaration.model.data.relationship != 'SELF') {
                            $zags.validateRelation($declaration.model.data.iin, $declaration.model.data.relationship, $declaration.model.data.declarantUin).then(function () {
                                defer.resolve();
                            }, function (message) {
                                $declaration.goStep('search');
                                $declaration.model.zagsError = message;
                                defer.reject(message);
                            });
                        }
                    }
                    return defer.promise;
                });
            });

            $declaration.onStep('status', function () {
                $declaration.getCurrentState();
            });

            $declaration.allowStep('search', function () {
                return !$declaration.requestId;
            });

            $declaration.allowStep('sign', function () {

                //иин должен быть указан, взят из сессии или сертификата
                var iinValid = !$session.operator && $declaration.model.data.relationship == 'SELF' || //
                    !$session.operator && $declaration.model.data.relationship != 'SELF' && $declaration.model.data.iin ||
                    $session.operator && $declaration.model.data.declarantUin;

                return !$declaration.requestId &&
                    iinValid &&
                    ($session.operator && $declaration.model.data.declarantUin || !$session.operator);
            });

            $declaration.allowStep('status', function () {
                return !!$declaration.requestId;
            });

        });

    }]);