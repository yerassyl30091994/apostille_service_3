angular.module("app").provider('$router', [ "categories_config", "declarations_config", "rubricator_config", function (categories_config, declarations_config, rubricator_config) {
    var provider = this;

    this.rubricator_config = rubricator_config;
    this.declarations_config = declarations_config;
    this.categories_config = categories_config;
    this.contextParams = window.__contextParams;

    var contextParams = this.contextParams;

    this.setContext = _.bind(function (context) {
        this.context = context;
        this.rootContext = contextParams.origin + '/';

        function parseHash(paramNames) {
            var result = {};
            if (contextParams.hashPath.length <= 1) return;
            for (var i = 1; i < contextParams.hashPath.length; i++) {
                result[paramNames[i - 1]] = contextParams.hashPath[i];
            }
            return result;
        }

        if (context == 'rubricator') {
            if (contextParams.hashPath && contextParams.hashPath.length > 0) {
                this.defaultState = contextParams.hashPath[0];
                this.defaultStateParams = parseHash(['categoryId']);
            } else {
                this.defaultState = 'categories';
            }
        } else {
            this.defaultState = context;
            this.defaultStateParams = parseHash(['step', 'model', 'requestId']);
        }
    }, this);

    this.getContextPath = function () {
        return provider.context.replace(/-/, '.').toUpperCase();
    };


    var routerSingleton = null;
    this.$get = ['$http', '$q', '$rootScope', '$robot', '$sound', '$state', '$interval', '$timeout', '$settings',
        function ($http, $q, $rootScope, $robot, $sound, $state, $interval, $timeout, $settings) {
            if (!routerSingleton) {
                routerSingleton = new Router($http, $q, $rootScope, $robot, $sound, $state, $interval, $timeout, $settings);
                $rootScope.$router = routerSingleton;
            }
            return routerSingleton;
        }];

    var Router = function ($http, $q, $rootScope, $robot, $sound, $state, $interval, $timeout, $settings) {

        $rootScope.$router = this;

        var self = this;
        $rootScope.$state = $state;

        this.rootContext = provider.rootContext;
        this.context = provider.context;
        this.contextParams = provider.contextParams;
        this.pendingRequests = 0;

        $rootScope.$watch('$router.pendingRequests', function () {
            resetInactivityCountdown();
        });
        resetInactivityCountdown();
        var inactivityCountdown;

        function resetInactivityCountdown() {
            if (inactivityCountdown) $timeout.cancel(inactivityCountdown);
            inactivityCountdown = $timeout(function () {
                if (!$settings.isEnabled() && $settings.isPod()) {
                    if (!$settings.isNewPod()) {
                        self.goHome();
                    }
                }
            }, 600 * 1000);
        }

        this.getHomeUrl = function () {
            return self.rootContext + 'rubricator/#/categories';
        };

        this.goHome = function () {
            var currentLocation = window.location.href;
            var homeUrl = self.getHomeUrl();
            if (homeUrl == currentLocation) {
                window.location.reload();
            } else {
                window.location.href = homeUrl;
            }
        };

        this.getGroupUrl = function () {
            if (locations.category.active()) return self.rootContext + 'rubricator/#/category/' + locations.category.categoryId;
            if (locations.declarations.active()) return self.rootContext + 'rubricator/#/declarations/';
            if (locations.declaration.active()) return self.rootContext + 'rubricator/#/category/' + locations.declaration.get().category;
        };

        this.getGroupTitle = function () {
            return locations.category.active() && locations.category.get().title ||
                locations.declarations.active() && locations.declarations.title ||
                locations.declaration.active() && locations.declaration.getCategory().title;
        };

        this.getGroupTitleSize = function () {
            return locations.category.active() && locations.category.get().titleSize ||
                locations.declarations.active() && locations.declarations.titleSize ||
                locations.declaration.active() && locations.declaration.getCategory().titleSize;
        };

        this.getDeclarationUrl = function (declarationId) {
            return self.rootContext + rubricator_config[declarationId].context + '/#/';
        };

        this.getDeclaration = function (declarationId) {
            return declarations_config[declarationId];
        };

        this.getRubricator = function (declarationId) {
            return rubricator_config[declarationId];
        };

        this.getCategory = function (categoryId) {
            return categories_config[categoryId];
        };

        var locations = {
            categories: {
                select: function () {
                    activeLocation = locations.categories;
                },
                active: function () {
                    return activeLocation == locations.categories;
                },
                getIds: function () {
                    return _.keys(categories_config);
                },
                getPopularDeclarationsIds: function () {
                    return _.filter(getDeclarationsIds(), function (declarationCode) {
                        return rubricator_config[declarationCode].popular;
                    })
                },
                url: location.pathname + '#/',
                getCategoryIds: function () {
                    return _.keys(categories_config);
                }
            },
            declarations: {
                select: function () {
                    activeLocation = locations.declarations;
                    animate();
                },
                active: function () {
                    return activeLocation == locations.declarations;
                },
                url: location.pathname + '#/declarations/',
                getDeclarationsIds: function () {
                    return getDeclarationsIds();
                },
                title: "allServices"
            },
            category: {
                categoryId: null,
                select: function (categoryId) {
                    activeLocation = locations.category;
                    this.categoryId = categoryId;
                    animate();
                },
                active: function () {
                    return activeLocation == locations.category;
                },
                get: function () {
                    return categories_config[this.categoryId];
                },
                getDeclarationsIds: function () {
                    return getDeclarationsIds(this.categoryId);
                }
            },
            declaration: {
                declarationId: null,
                select: function (declarationId) {
                    activeLocation = locations.declaration;
                    this.declarationId = declarationId;
                },
                active: function () {
                    return activeLocation == locations.declaration;
                },
                getCategory: function () {
                    return categories_config[this.get().category]
                },
                get: function () {
                    return declarations_config[this.declarationId]
                }
            }
        };
        var activeLocation = locations.categories;

        this.getActiveLocation = function () {
            return activeLocation;
        };

        this.getLocation = function (location) {
            return locations[location];
        };


        var includeContentQueueSize = 0;
        $rootScope.$on('$includeContentRequested', function () {
            includeContentQueueSize++;
        });
        $rootScope.$on('$includeContentLoaded', function () {
            includeContentQueueSize--;
        });
        $rootScope.$on('$includeContentError', function () {
            includeContentQueueSize--;
        });

        this.afterLoading = function (callback) {
            var noRequests = false;
            var interval = $interval(function () {
                if (!noRequests && self.pendingRequests == 0 && includeContentQueueSize == 0) {
                    noRequests = true;
                    return;
                }
                if (noRequests) {
                    $interval.cancel(interval);
                    callback();
                }
            }, 50);
        };

        function getDeclarationsIds(category) {
            var declarationCodes = _.keys(rubricator_config);
            if (category) {
                declarationCodes = _.filter(declarationCodes, function (code) {
                    for(var i=0; i < rubricator_config[code].category.length; i++){
                        if(rubricator_config[code].category[i] == category){
                            return rubricator_config[code].category[i] == category;
                        }
                    }
                });
            }
            declarationCodes = _.sortBy(declarationCodes, function (code) {
                return rubricator_config[code].priority;
            });
            return declarationCodes;
        }

        function animate() {
            $sound.play('selectService');
            $robot.slightlyOpenedEyes();
        }

        $state.go(provider.defaultState, provider.defaultStateParams);
    };
}]);

angular.module("app").config(function ($stateProvider, $urlRouterProvider, $routerProvider, $httpProvider, $provide) {

    var context = null;
    if ($routerProvider.contextParams.path.length > 0 && $routerProvider.contextParams.path[0]) {
        if ($routerProvider.contextParams.path[0] == 'rubricator') {
            context = 'rubricator';
        } else {
            context = _.find(_.keys($routerProvider.declarations_config), function (declarationId) {
                return $routerProvider.declarations_config[declarationId].context == $routerProvider.contextParams.path[0];
            });
            if (context == null) {
                context = 'rubricator';
            }
        }
    } else {
        context = 'rubricator';
    }

    $routerProvider.setContext(context);
    $urlRouterProvider.otherwise('/');

    function addState(stateContext, stateName, url, templateUrl, controller) {
        if (context == stateContext) {
            $stateProvider.state(stateName, {url: url, templateUrl: templateUrl, controller: controller, reloadOnSearch: false});
        }
    }

    addState('rubricator', 'categories', "/categories", 'app/rubricator/categories.html', function ($router) {
        $router.getLocation('categories').select();
    });
    addState('rubricator', 'category', "/category/:categoryId", 'app/rubricator/category.html', function ($router, $stateParams) {
        $router.getLocation('category').select($stateParams.categoryId);
    });
    addState('rubricator', 'declarations', "/declarations", 'app/rubricator/category.html', function ($router) {
        $router.getLocation('declarations').select();
    });

    addState(
        window.__contextParams.contextId,
        window.__contextParams.contextId,
        "/declaration/:step/:model/:requestId",
        'app/declarations/' + window.__contextParams.contextId + '/index.html',
        function ($stateParams, $scope, $http, $router) {
            if(window.__contextParams.contextId in $routerProvider.declarations_config)
                $router.getLocation('declaration').select(window.__contextParams.contextId)
            else {
                error("Заявка " + $stateParams.declarationId + " не существует");
                $state.go('categories');
            }
        });

    location.hash = __contextParams.hash;
});
