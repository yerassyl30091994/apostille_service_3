angular.module("app").service('$uin', ['$http', function ($http) {

    var self = this;

    this.isValidUin = function (uin) {

        if (!uin || uin.length != 12 || !/^\d*$/.test(uin)) return false;

        var check11Digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
            check12Digits = [3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2],
            a = [],
            checksum = 0;

        for (var i = 0; i < 12; i++) {
            a[i] = parseInt(uin[i]);
            if (i < 11) checksum += a[i] * check11Digits[i];
        }
        checksum = checksum % 11;
        if (checksum == 10) {
            checksum = 0;
            for (i = 0; i < 11; i++) checksum += a[i] * check12Digits[i];
            checksum = checksum % 11;
        }

        var fields = {
            year: parseInt(uin[0] + uin[1]),
            month: parseInt(uin[2] + uin[3]),

            type: uin[4],
            aux: uin[5],
            index: parseInt(uin.substring(6, 10)),

            gender: parseInt(uin[6])
        };

        var isBin = getUinType(uin) == BIN,
            isIin = getUinType(uin) == IIN;

        if (isIin) {
            return checksum == a[11];
        }
        if (isBin) {
            return checksum == a[11] && fields.year >= 0 &&
                fields.month >= 1 && fields.month <= 12 &&
                (fields.type == 4 || fields.type == 5 || fields.type == 6) &&
                (fields.aux >= 0 || fields.aux <= 3);
        }
    };

    var BIN = 0, IIN = 1, UNKNOWN = 2;
    function getUinType(uin){
        if( uin[4] >= 4 && uin[4] <= 6 ) return BIN;
        if( uin[4] >= 0 && uin[4] <= 3 ) return IIN;
        return UNKNOWN;
    }

    this.isBin = function(uin){
        return self.isValidUin(uin) && getUinType(uin) == BIN;
    };

    this.isIin = function(uin){
        return self.isValidUin(uin) && getUinType(uin) == IIN;
    };

    this.isUin = function(uin){
        return self.isIin(uin) || self.isBin(uin);
    };

    this.get = function(uin){
        if( self.isBin(uin) ) return self.getOrganization(uin);
        if ( self.isIin(uin) ) return self.getIndividual(uin);
    };

    this.getOrganization = function (bin) {
        return $http.get("rest/gbdul/organizations/" + bin);
    };

    this.findOrganization = function (filter) {
        return $http.post("rest/gbdul/organizations", filter);
    };

    this.getIndividual = function (iin) {
        return $http.get("rest/gbdfl/person", {params: {iin: iin}});
    };

    this.getIndividualShortInfo = function (iin) {
        return $http.get("rest/gbdfl/persons/" + iin, {params: {infotype: 'short'}});
    };

    this.findIndividual = function (filter) {
        return $http.get("rest/gbdfl/persons", {params: filter});
    };

    this.title = function (uin, iinTitle, binTitle, notUinTitle){
        iinTitle = iinTitle || 'uin.defailtIinTitle';
        binTitle = binTitle || 'uin.defailtBinTitle';
        notUinTitle = notUinTitle || 'uin.defaultNotUinTitle';
        return { IIN: iinTitle, BIN: binTitle, UNKNOWN: notUinTitle }[getUinType(uin)];
    };

    /*Проверка статуса, по умолчанию когда не указан этот атрибут, то НЕ проверяется, если указать атрибут со значением "check"
    для ИИН на Умерший, Пропавший без вести, Безвестно отсутствующий, Скрывающийся от следствия, Исключенный из ГБД ФЛ, Удаленный из ГБД ФЛ
    для БИН на Ликвидирован, Реорганизован, Субъект с указанным БИН является ИПс, и Не зарегистрирован.
    Можно указать атрибут с нужными статусами и тогда на них только будет проверятся
    */
    this.checkStatus = function (status){
        if(typeof status == 'undefined'){
            return ['NotCheck'];
        }else if (status == 'check') {
            return ['DEAD', 'MISSING', 'ABSENT', 'DISAPPEARED', 'EXCLUDED', 'REMOVED', 'INCAPACITATED', '034', '035', '031', '033'];
        } else {
            return status.split(', ');
        }
    };

    /*Проверяем возраст на то что оно не меньше указанного*/
    this.checkAge = function (age, validAge){
        if(typeof age == 'undefined' || typeof validAge == 'undefined'){
            return false;
        }else{
            return this.getAge(age) < validAge ? true : false;
        }
    };

    /*Принимает дату рождения и возвращает возраст*/
    this.getAge = function (data){
      var birthday = new Date(data);
      var today = new Date();
      var age = today.getFullYear() - birthday.getFullYear();
      birthday.setFullYear(today.getFullYear());
      if (today < birthday) {
        age--;
      }
      return age;
    };

    return this;
}]);
