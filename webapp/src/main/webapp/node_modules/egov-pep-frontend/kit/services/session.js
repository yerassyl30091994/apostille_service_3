angular.module("app").service('$session', [
    '$http', '$q', '$rootScope', '$cookie', '$eds', '$timeout', '$document', '$state', '$router', '$injector', '$uin', '$settings', '$error', '$locales', 'cstOrganizationStatuses', 'cstPersonStatuses', 'cstAccessDeniedCodes',
    function ($http, $q, $rootScope, $cookie, $eds, $timeout, $document, $state, $router, $injector, $uin, $settings, $error, $locales, cstOrganizationStatuses, cstPersonStatuses, cstAccessDeniedCodes) {

        $rootScope.$session = this; //global service

        var self = this;
        var wRequestId;
        if(window.__contextParams.hashPath) {
            _.each(window.__contextParams.hashPath, function (val) {
                if (val.length === 14) {
                    wRequestId = val;
                }
            });
        }
        var requestId = $state.params.requestId || wRequestId || window.__contextParams.params['request-number'];
        function reset() {
            this.uin = null;
            this.info = null;
            this.operator = false;
            this.individual = false;
            this.organization = false;
            this.accessDeniedCode = null;
        }
        reset();

        this.login = function () {
            /*TODO в 30-12 чтобы дать доступ физ лицу для соглосования, был добавлен этот костыль с ?request-number=requestId*/
            var url = "rest/current-user";
            url = requestId ? url + "/?request-number=" + requestId : url;
            $http.get(url, {'headers': {'Cache-Control': 'no-cache'}}).success(function (data) {

                if (!data.uin)
                    return;

                reset();

                self.uin = data.uin;

                if ($settings.isPod() && !_.contains(data.roles, 'SERVICE_CENTER_OPERATOR')) {
                    // Теперь могут обычные польз. авторизоваться посредством "био"
                    //$error.setError('notOperatorLogin');
                    //$cookie.deleteFrom("JSESSIONID", window.__contextParams.context);
                    self.individual = _.contains(data.roles, 'USER_FL') ? data.info.person : null;
                } else {
					if ($settings.isPod())
						$injector.get('$declaration').reset();

                    self.operator = _.contains(data.roles, 'SERVICE_CENTER_OPERATOR') ? data.info.person : null;
                    if (self.operator) {
                        $eds.setAllowedUin('sign', self.uin);
                        $eds.setAllowedUin('sign2', self.uin);//todo fix
                        $eds.enableStorage('sign', self.uin);
                        $eds.enableStorage('sign2', self.uin);
                        $cookie.setTo('role', 'operator', "/");
                    } else {
                        $cookie.deleteFrom("role", "/");
                    }

					if (data.availability.available === false) {
					    self.individual = data.info.person;
					    self.organization = !self.operator ? data.info.organization : null;
					} else {
					    self.individual = _.contains(data.roles, 'USER_FL') ? data.info.person : null;
					    self.organization = !self.operator && _.contains(data.roles, 'USER_UL') ? data.info.organization : null;
					}

                    self.availability = data.availability;

                    if (self.individual) {

                      self.individual.phoneNumber = data.phoneInfo && data.phoneInfo.phone ? data.phoneInfo.phone : null;
                      self.individual.email = data.email ? data.email : null;

                        self.individual.valid = false;

                        if (self.individual.status === cstPersonStatuses.DEAD)
                            self.accessDeniedCode = cstAccessDeniedCodes.FL_DEAD;
                        else if (self.individual.status === cstPersonStatuses.MISSING || self.individual.status === cstPersonStatuses.ABSENT)
                            self.accessDeniedCode = cstAccessDeniedCodes.FL_MISSING;
                        else if (self.individual.status === cstPersonStatuses.DISAPPEARED)
                            self.accessDeniedCode = cstAccessDeniedCodes.FL_DISAPPEARED;
                        else if (self.individual.hasActualDocuments === false)
                            self.accessDeniedCode = cstAccessDeniedCodes.FL_NO_ACTUAL_DOCUMENTS;
                        else
                            self.individual.valid = data.availability.available;
                    }

                    if (self.organization) {

                        self.organization.email = data.email ? data.email : null;

                        self.organization.valid = false;

                        // Если ЮЛ ликвидирован или реорганизован с прекращением деятельности
                        if (self.organization.status.code === cstOrganizationStatuses.BIN_LIQUIDATED)
                            self.accessDeniedCode = cstAccessDeniedCodes.UL_LIQUIDATED;
                        else if (self.organization.status.code === cstOrganizationStatuses.BIN_REORGANIZED)
                            self.accessDeniedCode = cstAccessDeniedCodes.UL_REORGANIZED_FOR_STOPPAGE;
                        else
                            self.organization.valid = data.availability.available;
                    }

                    // Для выявления ситуаций, когда rest/current-user возвращает null в полях data.info.person и data.info.organization
                    if (!self.individual && !self.organization)
                        console.log("!self.individual && !self.organization");

                }
            }).error(function () {
               $error.setError('serverError');
            });

            return;
        };

        this.logout = function () {
            $eds.resetStorage('sign');

            $http.get('logout').finally(function () {
                reset();
                $cookie.deleteFrom("JSESSIONID", window.__contextParams.context);
                $cookie.deleteFrom("SSO", "/");
                $cookie.deleteFrom("role", "/");

                if ($injector.get('$settings').isPod()) {
                    $router.goHome();
                } else {
                    if ($injector.get('$settings').isEnabled()) {
                        $router.goHome();
                    } else {
                        //location.reload();
                        location.replace('/');
                    }
                }
            });

        };

        this.changeDeclarant = function (uin) {
            return $http.post("rest/current-user/change-declarant-iin-bin", { uin: uin });
        };

        $router.afterLoading(function () {
            self.login();
        });

        return this;
    }]);
