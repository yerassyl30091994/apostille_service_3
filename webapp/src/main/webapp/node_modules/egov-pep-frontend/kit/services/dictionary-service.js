angular.module("app").service('$dictionary', ['$http', '$q', '$rootScope', '$locales', function ($http, $q, $rootScope, $locales) {

    $rootScope.$dictionary = this; //global service
    var self = this;
    this.callHistory = [];

    /// Обработчик запроса для 'rest/ar/get-room-types'
    /// Возвращает составной объект т.к. для директивы ИСАР помимо пар ключ-значение нужны еще и коды т.е. маппинг id-шников к кодам
    function parseDictionaryRoom(items) {
        var roomKeyValuePairs = {};
        var roomCodeMap = {};

        // room.code может быть null !!!

        _.each(items, function (room) {
            roomCodeMap['id_' + room.id] = room.code;

            var langId = $locales.current();
            if (langId === 'kz')
                langId = 'kk';

            roomKeyValuePairs[room.id] = room.value[langId];
        });

        var compositeResult = {
            roomKeyValuePairs: roomKeyValuePairs,
            roomCodeMap: roomCodeMap
        };
        return compositeResult;
    }

    function parseDictionary(items) {
        var result = {};
        _.each(items, function (item) {
            $locales.fixGetters(item);
            result[item.id] = item.name;
        });
        return result;
    }

    function parseDictionaryCountry(items) {
        var result = {};
        _.each(items, function (item) {
            $locales.fixGetters(item);
            if(item.numberCode) {
                result[item.numberCode] = item.name;
            }
        });
        return result;
    }

    function parseDictionaryCurrent(items) {
        var result = {};
        _.each(items, function (item) {
            if ($locales.current() === 'ru') result[item.id] = item.nameRu;
            if ($locales.current() === 'kz') result[item.id] = item.nameKz;
            if ($locales.current() === 'en') result[item.id] = item.nameEn;
        });
        return result;
    }

    function parseDictionarys(value) {
        var result = {};
        _.each(value, function (item) {
            $locales.fixGetters(item);
            result[item.code] = item.name;
        });
        return result;
    }

    function parseDictionarysCurrent(value) {
        var result = {};
        _.each(value, function (item) {
            if ($locales.current() === 'ru') result[item.code] = item.nameRu;
            if ($locales.current() === 'kz') result[item.code] = item.nameKz;
            if ($locales.current() === 'en') result[item.code] = item.nameEn;
        });
        return result;
    }

    this.alpaCurrent = parseDictionaryCurrent;
    this.alpa = parseDictionary;
    this.betaCurrent = parseDictionarysCurrent;
    this.beta = parseDictionarys;

    function mapinize(items) {
        var result = [];
        _.each(items, function (item) {
            result[item.id] = item;
        });
        return result;
    }

    this.mapinize = mapinize;

    this.onLocaleChange = function () {
        _.each(self.callHistory, function (callHistoryElem) {
            call.apply(self, callHistoryElem);
        });
    };

    function register(dictionaryPath, dictionaryId, parser, callback, index) {
        self.callHistory.push([dictionaryPath, dictionaryId, parser, callback, index]);
        call(dictionaryPath, dictionaryId, parser, callback, index);
    }

    function registerFilter(dictionaryPath, dictionaryId, parser, filterFieldName, filterValue, callback, index) {
        self.callHistory.push([dictionaryPath, dictionaryId, parser, filterFieldName, filterValue, callback, index]);
        callFilter(dictionaryPath, dictionaryId, parser, filterFieldName, filterValue, callback, index);
    }

    function call(dictionaryPath, dictionaryId, parser, callback, index) {
        $http.get(dictionaryPath + (dictionaryId ? '/' + dictionaryId : '')).then(function (rs) {
            callback(parser(rs), rs.data, index);
        });
    }

    // /rest/dictionary/linear/SPORT_HONORARY_CATEGORIES?attribute=attribute&value=P62.05
    function callFilter(dictionaryPath, dictionaryId, parser, filterFieldName, filterValue, callback, index) {
        var filterStr = '';
        if ( filterFieldName && filterValue ) filterStr = '?attribute=' + filterFieldName + '&value=' + filterValue;
        $http.get(dictionaryPath + (dictionaryId ? '/' + dictionaryId + filterStr : '')).then(function (rs) {
            callback(parser(rs), rs.data, index);
        });
    }

    function parseItemized(rs) {
        return parseDictionary(rs.data.items);
    }

    function parseItemizedCountry(rs) {
        return parseDictionaryCountry(rs.data.items);
    }

    function parseItemize(rs) {
        return parseDictionarys(rs.data.items);
    }

    function parseDirect(rs) {
        return parseDictionary(rs.data);
    }

    function parseDirectBanks(rs) {
        return parseDictionarys(rs.data);
    }

    function parseDirectRoom(rs) {
        return parseDictionaryRoom(rs.data);
    }

    this.linear = function (dictionaryId, callback) {
        register('rest/dictionary/linear', dictionaryId, parseItemized, callback);
    };

    this.linearFilter = function (dictionaryId, filterFieldName, filterValue, callback) {
        registerFilter('rest/dictionary/linear', dictionaryId, parseItemized, filterFieldName, filterValue, callback);
    };

    this.linearCountry = function (dictionaryId, callback) {
        register('rest/dictionary/linear', dictionaryId, parseItemizedCountry, callback);
    };

    this.ekyzmet = function (dictionaryId, callback) {
        register('rest/app/dictionary', dictionaryId, parseItemized, callback);
    };

    this.rn = function (dictionaryId, callback) {
        register('rest/rn/dictionary', dictionaryId, parseItemized, callback);
    };

    this.bank = function (dictionaryId, callback) {
        register('rest/dictionary/linear', dictionaryId, parseItemize, callback);
    };

    this.banks = function (dictionaryId, callback) {
        register('rest/reference', dictionaryId, parseDirectBanks, callback);
    };

    this.ar = function (dictionaryId, callback) {
        register('rest/ar', dictionaryId, parseItemized, callback);
    };

    this.arGetRoom = function (dictionaryId, callback) {
        register('rest/ar', dictionaryId, parseDirectRoom, callback);
    };

    this.hier = function (dictionaryId, callback) {
        register('rest/dictionary/hierarchical', dictionaryId, parseItemized, callback);
    };

    this.hierar = function (dictionaryId, callback) {
        register('rest/dictionary/hierarchical', dictionaryId, parseItemize, callback);
    };

    this.taxTypes = function (callback) {
        register('rest/dictionary/linear/TAX_TYPE', null, parseItemized, callback);
    };

    this.paymentPurposes = function (callback) {
        register('rest/dictionary/linear/PAYMENT_PURPOSE', null, parseItemized, callback);
    };

    this.arta = function (dictionaryId, callback) {
        register('rest/arta-synergy/dictionary', dictionaryId, parseItemized, callback);
    };

    this.local = function (localUrl, callback) {
        register(localUrl, null, parseDirect, callback);
    };
    this.hierarchialLocal = function (localUrl, callback, index) {
        register(localUrl, null, parseItemized, callback, index);
    };
    this.hierarchialPep = function (localUrl, callback, index) {
        register(localUrl, null, parseItemize, callback, index);
    };
    return this;
}]);