angular.module("app").service('$locales', ['$rootScope', '$cookie', '$window', '$injector', '$settings', function ($rootScope, $cookie, $window, $injector, $settings) {

    $rootScope.$locales = this; //global service

    var self = this;

    this.emulateEnKz = false;

    var allLocales = ['kz', 'ru', 'en'];
    var currentLocale = getCookieLocale();
    setCookieLocale(currentLocale);

    function getCookieLocale() {
        var cookieValue = $cookie.get('egovLang');
        return parseLocale(cookieValue);
    };

    function setCookieLocale(value) {
        var locale = parseLocale(value);

        // делаем замену т.к. ПЭП и "rest/current-user" не распознают значение 'kz', 
        if (locale === 'kz')
            locale = 'kk';

        var mainDomain = getMainDomain();

        $cookie.setToDomain('egovLang', locale, '/', mainDomain); // куки для ПЭП
        $cookie.setToDomain('locale', locale, '/', mainDomain); // куки для рест сервисов услуг
    };

    function parseLocale(value) {
        value = value || 'kz';

        if (value.length > 2)
            value = value.substring(0, 2);

        value = value.toLowerCase();

        if (value === 'kk')
            value = 'kz';

        if (allLocales.indexOf(value) === -1)
            value = 'kz';

        return value;
    };

    function getMainDomain() {
        var domains = $window.location.hostname.split('.');
        var mainDomain = domains[domains.length - 2] + '.' + domains[domains.length - 1];
        return mainDomain;
    }

    self.getCookieLocale = getCookieLocale;
    self.setCookieLocale = setCookieLocale;
    self.parseLocale = parseLocale;

    this.current = function () {
        if (self.emulateEnKz === true)
            if (currentLocale === 'en')
                return 'kz';

        return currentLocale;
    };

    this.currentNoEmulate = function() {
        return currentLocale;
    }

    this.all = function () {
        return allLocales;
    };

    this.available = function (key) {
        return _.without(allLocales, currentLocale)[key];
    };

    this.fixGetters = function (obj) {
        _.each(_.keys(obj), function (key) {
            if (_.isObject(obj[key])) self.fixGetters(obj[key]);
            if (key.match(/(Ru|Kz|En)$/) != null) {
                var bareKey = key.replace(/(Ru|Kz|En)$/, '');
                var localKey = bareKey + self.current().capitalize();
                if (!obj.hasOwnProperty(bareKey)) {
                    obj[bareKey] = obj[localKey];
                }
            }
        });
    };

    this.choose = function (value) {
        currentLocale = parseLocale(value);

        self.setCookieLocale(currentLocale);

        $injector.get('$dictionary').onLocaleChange();

        if ($settings.isPep())
            $injector.get('$session').login();
    };

    return this;
}]);