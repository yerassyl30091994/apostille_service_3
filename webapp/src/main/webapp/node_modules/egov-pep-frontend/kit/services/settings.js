angular.module("app").service('$settings', [ '$http', '$q', '$rootScope', '$cookie', 'localStorageService', '$injector', function ($http, $q, $rootScope, $cookie, localStorageService, $injector) {

    var self = $rootScope.$settings = this;//global service

    if( window.__contextParams.params.debugger ){
        $cookie.setTo('egov-debug', true, '/');
    }

    function apply(){
        if( debug ){
            // $keyboard.enable(self.isPod() && !self.isForceHardwareKeyboard());
            //$injector.get('functionalTestService').loadTests();
        }

    }

    var bccCache = {};
    function bcc(name, val){ //boolean cached cookie
        if( arguments.length<2 ) {
            if( !bccCache[name] ) {
                val = $cookie.get(name);
                bccCache[name] = val == 'true' ? true : val == 'false' ? false : val;
            }
            return bccCache[name];
        } else {
            bccCache[name] = val;
            $cookie.setTo(name, val, '/');
            apply();
        }
    }

    var debug = bcc('egov-debug');
    this.isEnabled = function(){
        return !!debug;
    };

    this.getParam = function(name){
        return bcc(name);
    };

    this.toggleParam = function(name){
        var param = bcc(name);
        if(name != "egov-client-type"){
            bcc(name, !param);
        } else {
            if(param === "POD" || !param) bcc("egov-client-type", "PORTAL")
            else bcc("egov-client-type", "POD");
        }
        return document.location.reload();
    };

    this.toggleContrast = function(){
        if(!bcc('egov-contrast-view')) {
            bcc('egov-contrast-view', true);
            bcc('egov-contrast-view-mode', "light");
        }
        else {
            bcc('egov-big-font', false);
            bcc('egov-contrast-view', false);
            bcc('egov-contrast-view-mode', false);
        }
    };

    this.isContrast = function(){
        return bcc('egov-contrast-view') || false;
    };

    this.toggleFont = function(){
        if(!bcc('egov-big-font')) bcc('egov-big-font', true)
        else bcc('egov-big-font', false)
    };

    this.isBigFont = function(){
        return bcc('egov-big-font') || false;
    };

    this.contrastTheme = function(){
        return bcc('egov-contrast-view-mode') || false;
    };

    this.toggleContrastTheme = function(){
        var theme = bcc('egov-contrast-view-mode');
        if(theme === "dark") bcc('egov-contrast-view-mode', "light")
        else bcc('egov-contrast-view-mode', "dark")
    };

    this.setClientType = function(val){
        bcc('egov-client-type', val);
    };
    this.getClientType = function(){
        return bcc('egov-client-type') || 'POD';
    };
    this.isPep = function() {
        return self.getClientType().toLowerCase() == 'portal';
    };
    this.isPod = function() {
        return self.getClientType().toLowerCase() == 'pod';
    };
    this.isNewPod = function() {
        return window.location.href.indexOf('Reg03') != -1;
    };

    this.setMute = function(val){
        bcc('egov-mute', val);
    };
    this.isMute = function(){
        return bcc('egov-mute');
    };

    this.setForceHardwareKeyboard = function(val){
        bcc('egov-forcehwkeybd', val);
    };
    this.isForceHardwareKeyboard = function(){
        return bcc('egov-forcehwkeybd');
    };

    this.setHints = function(val){
        bcc('egov-testhints', val);
    };
    this.isHints = function(){
        return bcc('egov-testhints');
    };

    this.toggleStubbedRest = function(){
        var param = bcc('egov-stubbedrest');
        bcc('egov-stubbedrest', !param);
        document.location.reload();
    };

    this.setStubbedRest = function(val){
        bcc('egov-stubbedrest', val);
    };
    this.isStubbedRest = function(){
        return bcc('egov-stubbedrest');
    };

    this.setSlowMode = function(val){
        bcc('egov-slomo', val);
    };
    this.isSlowMode = function(){
        return bcc('egov-slomo');
    };

    this.setPodTools = function(val){
        bcc('egov-stillpod', val);
    };
    this.isPodTools = function(){
        return bcc('egov-stillpod');
    };

    apply();

    if( window.__contextParams.params.debug == 'nobackend' ){
        self.setStubbedRest(true);
    }

    this.storeAppletCall = function(method, args, result){
        if( !self.isAppletCache() ) return;

        var appletCache = localStorageService.get('appletCache');
        if( !appletCache ) { localStorageService.set('appletCache', {}); }

        var key = JSON.stringify({ method: method, args: args });
        appletCache[key] = result;
    };

    this.restoreAppletCall = function(method, args){
        if( !self.isAppletCache() ) return null;

        var appletCache = localStorageService.get('appletCache');
        if( !appletCache ) return null;

        var key = JSON.stringify({ method: method, args: args });
        return appletCache[key];
    };

    return this;
}]);