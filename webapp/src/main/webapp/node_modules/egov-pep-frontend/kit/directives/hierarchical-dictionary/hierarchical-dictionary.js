angular.module("app").directive("hierarchicalDictionary", ['$http','$locales','$modal','$declaration', function ($http,$locales,$modal,$declaration) {
    var baseUrl = 'rest/dictionary/hierarchical/';

    function loadChilds(type, parenId) {
        var url = null;
        switch (true){
            case type == "RN":
                type = type.toLowerCase();
                url = 'rest/'+type+'/dictionary/address/'+parenId;
                break;
            default:
                url = baseUrl+'?type='+type+'&parentId='+parenId;
                break;
        }
        return $http.get(url);
    }

    function parseDictionary(items){
        var result = {};
        _.each(items, function(item){
            $locales.fixGetters(item);
            result[item.id] = item.name;
        });
        return result;
    }

    return {
        templateUrl: "kit/directives/hierarchical-dictionary/hierarchical-dictionary.html",
        restrict: "E",
        replace: true,
        transclude: true,
        scope:{
            type: "@",
            lastId:"=",
            strModel: "="
        },
        controller: function($scope){
            $scope.viewModel = {
                loadedlist : 0,
                lists : [],
                argument : [],
                items:{}
            }
        },
        link: function (scope, elm, attrs) {
            scope.$modal = $modal;

            switch (true) {
                case scope.type == "KATO":
                    scope.chooseLabel = {
                        1:{ id:"1", labelName: "Выберите область", req:"yes"},
                        2:{ id:"2", labelName: "Выберите район", req:"yes"},
                        3:{ id:"3", labelName: "Выберите округ", req:"yes"},
                        4:{ id:"4", labelName: "Выберите село", req:"no"},
                        5:{ id:"5", labelName: "Выберите улицу", req:"no"}
                    };
                    break;
                case scope.type == "TAX_STRUCTURES":
                    scope.chooseLabel = {
                        1:{ id:"1", labelName: "Выберите налоговый комитет", req:"yes"},
                        2:{ id:"2", labelName: "Выберите налоговый департамент", req:"yes"},
                        3:{ id:"3", labelName: "Выберите налоговое управление", req:"yes"}
                    };
                    break;
                case scope.type == "RN":
                    scope.chooseLabel = {
                        1:{ id:"1", labelName: "Выберите область", req:"yes"},
                        2:{ id:"2", labelName: "Выберите район",  req:"yes"},
                        3:{ id:"3", labelName: "Выберите округ",   req:"yes"},
                        4:{ id:"4", labelName: "Выберите село",   req:"no"},
                        5:{ id:"5", labelName: "Выберите улицу",   req:"no"}
                    };
                    break;
                default:
                    scope.chooseLabel = {
                        1:{ id:"1", labelName: "Выберите",   req:"yes"},
                        2:{ id:"2", labelName: "Выберите",   req:"yes"},
                        3:{ id:"3", labelName: "Выберите",   req:"yes"},
                        4:{ id:"4", labelName: "Выберите",   req:"no"},
                        5:{ id:"5", labelName: "Выберите",   req:"no"},
                        6:{ id:"6", labelName: "Выберите",   req:"no"},
                        7:{ id:"7", labelName: "Выберите",   req:"no"},
                        8:{ id:"8", labelName: "Выберите",   req:"no"},
                        9:{ id:"9", labelName: "Выберите",   req:"no"}
                    };
                    break;
            }

            scope.loadRoot = function(type)  {
                var url = null;
                switch (true){
                    case type == "RN":
                        type = type.toLowerCase();
                        url = 'rest/'+type+'/dictionary/address/';
                        break;
                    default:
                        url = baseUrl+type;
                        break;
                }
                return $http.get(url);
            };

            scope.selected = [];

            scope.valuesPage = {
                page: 0,
                pages: 1,
                list: [],
                first: [],
                last: []
            };
            scope.$modal = $modal;
            scope.name = attrs.name;
            scope.dataArr = [];
            scope.codesArr = [];

            scope.loadRoot(scope.type).then(function (result) {
                //из иерархического справочника в списке областей надо убрать Казахстан
                if (scope.type=="RN") {
                    if (result.data.items) {
                        for (var i = result.data.items.length - 1; i >= 0; i--) {
                            if (result.data.items[i].id && result.data.items[i].id === '88000001001') {
                                result.data.items.splice(i, 1);
                            }
                        }
                    }
                }
                scope.viewModel.items = parseDictionary(result.data.items);
                scope.viewModel.lists.push(scope.viewModel.items);
            }, function () {

            });

            scope.arraySearch = function(arr,val) {
                for (var i=0; i<arr.length; i++)
                    if (arr[i] === val)
                        return i;
                return false;
            };

            scope.select = function(index,ind){
                if (scope.valuesLeng > 8) {
                    scope.selected[ind] = scope.codesArr[index-1];
                }else {
                    scope.selected[ind] = index;
                }
                //Загружаем дочерний справочник
                if (!scope.modelName) {
                    scope.modelName = [];
                }
                if (!scope.strModel) {
                    scope.strModel = '';
                }
                if (index != null){
                    loadChilds(scope.type, scope.selected[ind]).then(function (result) {
                        if(result.data.length != 0) {
                            //очистка внучат справочника
                            for (var ii = 2;ii<10;ii++){
                                scope.viewModel.lists[ind+ii] = null;
                                scope.selected[ind+ii] = null;
                            }
                            console.log(scope.viewModel.lists,'lists');
                            //
                            scope.viewModel.lists[ind+1]=parseDictionary(result.data.items);
                            //пихаем в модель выбранный элемент если модель есть
                            if (scope.modelName){
                                scope.modelName.splice(ind+1,10);
                                scope.modelName[ind]= scope.viewModel.lists[ind][scope.selected[ind]];
                                scope.strModel = '';
                                for (var i = 0; i<scope.modelName.length; i++){
                                    if (i != scope.modelName.length - 1) {
                                        scope.strModel +=  scope.modelName[i] + ', ';
                                    }else  {
                                        scope.strModel +=  scope.modelName[i];
                                    }
                                }
                            }
                            else {
                                if (!scope.strModel) {
                                    scope.strModel = scope.viewModel.lists[ind][scope.selected[ind]];
                                } else {
                                    scope.strModel += ', ' + scope.viewModel.lists[ind][scope.selected[ind]];
                                }
                            }
                            //
                            scope.lastId = scope.selected[ind];
                            console.log(scope.lastId,'lastId');
                        }
                    });
                }else {//если выбран --
                    for (var ii = 1;ii<10;ii++){ //очищаем дочерние справочники
                        scope.viewModel.lists[ind+ii]= null;
                        scope.selected[ind+ii] = null;
                    }
                    scope.modelName.splice(ind,10);
                    scope.strModel = '';
                    for (var i = 0; i<scope.modelName.length; i++){
                        if (i != scope.modelName.length - 1) {
                            scope.strModel +=  scope.modelName[i] + ', ';
                        } else {
                            scope.strModel +=  scope.modelName[i];
                        }
                        if (ind != 0) {
                            scope.lastId = scope.selected[ind-1];
                        } else {
                            scope.lastId = null;
                            scope.modelName= [];
                            scope.strModel = '';
                        }
                    }
                }
                //
                //$declaration.clearStepData();
            };

            scope.listNotFree = function(ind){
                var c= 0;
                for(var g in scope.viewModel.lists[ind]){
                    c++;
                }
                if (c>0) {
                    return true;
                } else {
                    return false;
                }
            };
            scope.refreshData = function(ind) {
                var c = 0;
                scope.dataArr = [];
                for (var g in scope.viewModel.lists[ind]) {
                    scope.dataArr[c] = scope.viewModel.lists[ind][g];
                    scope.codesArr[c] = g;
                    c++;
                }
                scope.valuesLeng = c;
                var valuesPage = scope.valuesPage;
                valuesPage.page = 0;
                valuesPage.pages = Math.ceil( scope.valuesLeng/10 );
                scope.valuesPage.first = [];
                scope.valuesPage.list = [];
                scope.valuesPage.list = scope.dataArr.slice(valuesPage.page*9, (valuesPage.page+1)*9);
                scope.valuesPage.last = [];

            };

            var valuesPage = scope.valuesPage;
            valuesPage.page = 0;
            valuesPage.pages = Math.ceil( scope.valuesLeng/10 );
            scope.valuesPage.list = scope.dataArr.slice(valuesPage.page*9, (valuesPage.page+1)*9);


            scope.nextPage = function () {
                if (valuesPage.page < valuesPage.pages - 1){
                    valuesPage.page++;
                    scope.valuesPage.list = [];
                    scope.valuesPage.list = scope.dataArr.slice(valuesPage.page*9, (valuesPage.page+1)*9);
                    scope.valuesPage.first = scope.dataArr[valuesPage.page*9-1];
                    scope.valuesPage.last = [];
                    $('body').css('overflow', 'hidden').height();
                    $('body').css('overflow', 'auto');
                }
            };

            scope.previousPage = function () {
                if (valuesPage.page > 0){
                    valuesPage.page--;
                    scope.valuesPage.list = [];
                    if (valuesPage.page != 0) {
                        scope.valuesPage.list = scope.dataArr.slice(valuesPage.page*9-1 , (valuesPage.page+1)*9-1);
                        scope.valuesPage.last = scope.dataArr[(valuesPage.page+1)*9-1]
                    }
                    else {
                        scope.valuesPage.list = scope.dataArr.slice(valuesPage.page*9, (valuesPage.page+1)*9);
                        scope.valuesPage.last = [];
                    }
                    scope.valuesPage.first = [];
                }
                $('body').css('overflow', 'hidden').height();
                $('body').css('overflow', 'auto');
            };
        }
    };
}
]);