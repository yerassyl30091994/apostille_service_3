angular.module("app").directive("isarDictionary", ['$http', '$locales', '$modal', '$declaration', '$dictionary', "$interpolate",
    function ($http, $locales, $modal, $declaration, $dictionary, $interpolate) {

        /**
         * NOTICE:
         getATUs   - find-at-units
         getCityParts  - find-geo
         getObjects  - find-addressable-building-object, find-addressable-lang-object, find-addressable-room-object
         getRoomTypes - get-room-types
         gethAddressTextOfRCA - find-address-history/{rca} --NOT WORKS


         FindAddressableObjectRequest
         atUnitId
         geonimId

         FindAddressableLandObjectRequest extends FindAddressableObjectRequest
         number    apartment.ground.number
         cadastreNumber    apartment.ground.cadastral

         FindAddressableBuildingObjectRequest  extends FindAddressableObjectRequest
         number    apartment.number
         partComplexNumber    apartment.hull
         partBuildingNumber    apartment.block

         FindAddressableRoomObjectRequest extends FindAddressableBuildingObjectRequest
         roomCode    viewModel.room.selected code instead of id
         roomNumber    apartment.flat.number
         */

        return {
            templateUrl: "kit/directives/isar-dictionary/isar-dictionary.html",
            restrict: "E",
            replace: true,
            transclude: false,
            scope: {
                //            modelName: "=",
                //            model: "=",
                //            type: "@"
                //            lastId:"="
                componentModel: '=',
                name: '='
            },
            controller: function ($scope) {
            },
            link: function (scope, elm, attrs) {
                scope.notFoundMsg = false;
                scope.$modal = $modal;
                scope.viewModel = {
                    type: {
                        types: [
                            {
                                code: 'address'
                            },
                            {
                                code: 'registration-code'
                            }
                        ]
                    },
                    apartment: {
                        types: [
                            {
                                id: 2,
                                code: 'flat',
                                name: 'Помещение'
                            },
                            {
                                id: 1,
                                code: 'building',
                                name: 'Здание'
                            },
                            {
                                id: 0,
                                code: 'ground',
                                name: 'Земельный участок'
                            }
                        ]
                    },
                    room: {
                        types: {},
                        selected: null,
                        obj: {}
                    }
                };
                scope.hideStead = attrs.hideStead;
                scope.model = {
                    cadastral: {
                        number: null
                    },
                    apartment: {
                        number: {value: null, valid: false},
                        hull: {value: null},
                        block: {value: null},
                        ground: {
                            number: {value: null},
                            cadastral: {value: null}
                        },
                        flat: {
                            number: {value: null, valid: false}
                        }
                    }
                };

                scope.$watch('model.rka', function (newValue, oldValue) {
                    if (newValue !== undefined) {
                        // 16 символов, только цифры
                        if (newValue.match(/^[0-9]{1,16}$/) === null) {
                            scope.model.rka = scope.model.rka.substring(0, scope.model.rka.length - 1);
                        }
                    }

                });

                scope.validateApartmentNumber = function (name) {
                    scope.model.apartment.number.valid = false;
                    if (name) {
                        name = name.trim();
                    }
                    scope.model.apartment.number.value = name;
                    if (isEmpty(name)) {
                        return false;
                    }
                    scope.model.apartment.number.valid = true;
                    return true;
                };

                scope.validateFlatNumber = function (name) {
                    scope.model.apartment.flat.number.valid = false;
                    if (name) {
                        name = name.trim();
                    }
                    scope.model.apartment.flat.number.value = name;
                    if (isEmpty(name)) {
                        return false;
                    }
                    scope.model.apartment.flat.number.valid = true;
                    return true;
                };

//                scope.searchIsAvailable = false;
//
//                scope.canSearch = function () {
//                    if (scope.selected.apartment.code === 'flat') {
//                        return scope.searchIsAvailable && scope.viewModel.room.selected;
//                    }else if(scope.selected.apartment.code === 'ground'){
//                        return scope.model.apartment.ground.number.value && scope.model.apartment.ground.cadastral.value;
//                    }else if(scope.selected.apartment.code === 'building'){
//                        return scope.model.apartment.number.value;
//                    }else{
//                        return false;
//                    }
//                    return scope.searchIsAvailable;
//                };
//
//                scope.$watch('model', function (newVal, oldVal) {
//                    scope.searchIsAvailable = false;
//
//                    switch (scope.selected.apartment.code) {
//                        case 'flat':
//                            scope.searchIsAvailable = scope.model.apartment.number.valid && scope.model.apartment.flat.number.valid;
//                            break;
//                        case 'building':
//                            scope.searchIsAvailable = scope.model.apartment.number.valid;
//                            break;
//                        case 'ground':
//                            scope.searchIsAvailable = scope.model.apartment.number.valid;
//                            break;
//                    }
//                    if (scope.selected.apartment.code === 'flat' || scope.selected.apartment.code === 'building') {
//                        scope.searchIsAvailable = scope.searchIsAvailable && (scope.selected.region.address.id !== null);
//                    }
//                    else {
//                        scope.searchIsAvailable = true;
//                    }
//                    //                    $declaration.clearStepData();
//                }, true);

                scope.selected = {
                    type: scope.viewModel.type.types[0], // 'address', 'cadastral-number',
                    region: {
                        address: {
                            id: null
                        }
                    },
                    apartment: scope.viewModel.apartment.types[0]
                    /*
                     1: Квартира
                     2: Нежилое помещение
                     3: Парковочное место
                     4: Терраса
                     5: Жилое помещение
                     6: Офис
                     7: Гараж
                     8: Встроенное помещение
                     9: Комната
                     10: Машинное место
                     11: Техническое помещение
                     */
                };
                /*
                 getATUs   - find-at-units
                 getCityParts  - find-geo
                 getObjects  - find-addressable-building-object, find-addressable-lang-object, find-addressable-room-object
                 getRoomTypes - get-room-types
                 gethAddressTextOfRCA - find-address-history/{rca}
                 */

                var roomCodeMap = [];
                $dictionary.arGetRoom('get-room-types', function (compositeResult) {
                    // При обращении к 'rest/ar/get-room-types' нам помимо ключ-значений надо собрать маппинг ID <-> CODE. Это делается в $dictionary в парсере для 'rest/ar/get-room-types'
                    scope.viewModel.room.types = compositeResult.roomKeyValuePairs;
                    roomCodeMap = compositeResult.roomCodeMap;
                });
                scope.fetchAddressHistory = function () {
                    if (scope.model.rka) {
                        scope.model.regNumber = false;
                        scope.componentModel = {};
                        $http.get("rest/ar/address-is-exist-by-rca/" + scope.model.rka).success(function (data) {
                            if (data === "true") {
                                scope.model.regNumber = true;
                                scope.componentModel = {};
                                scope.componentModel.item = {
                                    rca: scope.model.rka
                                };
                            } else {
                                scope.model.regNumber = "false";
                            }
                        }).error(function () {
                            console.log("Не удалось получить рест rest/ar/address-is-exist-by-rca/");
                        });
                    }
                };

                scope.search = function () {
                    scope.notFoundMsg = false;

                    var requestObject = {};
                    requestObject.atUnitId = Number(scope.selected.region.address.id);
                    requestObject.geonimId = Number(scope.selected.region.address.geonim);
                    var method = 'find-addressable-lang-object';
                    //                find-addressable-building-object, find-addressable-lang-object, find-addressable-room-object
                    if (scope.selected.type.code === 'address') {
                        switch (scope.selected.apartment.code) {
                            case 'ground':
                                method = 'find-addressable-lang-object';
                                requestObject.number = scope.model.apartment.ground.number.value;
                                requestObject.cadastreNumber = scope.model.apartment.ground.cadastral.value;
                                break;
                            case 'building':
                                method = 'find-addressable-building-object';
                                requestObject.number = scope.model.apartment.number.value;
                                requestObject.partComplexNumber = scope.model.apartment.hull.value;
                                requestObject.partBuildingNumber = scope.model.apartment.block.value;
                                break;
                            case 'flat':
                                method = 'find-addressable-room-object';
                                requestObject.number = scope.model.apartment.number.value;
                                requestObject.partComplexNumber = scope.model.apartment.hull.value;
                                requestObject.partBuildingNumber = scope.model.apartment.block.value;
                                requestObject.roomCode = roomCodeMap['id_' + scope.viewModel.room.selected];
                                requestObject.roomNumber = scope.model.apartment.flat.number.value;
                                break;
                        }
                    }

                    scope.model.regNumber = false;
                    scope.componentModel = {};
                    $http.post('rest/ar/' + method, requestObject).success(function (data, status) {

                        console.log(status === 204);
                        scope.notFoundMsg = (status === 204);
                        scope.componentModel = {};
                        scope.componentModel.item = data;
                        scope.componentModel.obj = {
                            region: scope.selected.region,
                            apartment: scope.selected.apartment,
                            model: scope.model,
                            room: {
                                id: scope.viewModel.room.selected,
                                name: scope.viewModel.room.types[scope.viewModel.room.selected],
                                obj: scope.viewModel.room.obj[scope.viewModel.room.selected]
                            }
                        };

                        //                    location.href = data.transactionCompletingUrl;
                    }).error(function (err) {
                        console.log(err);
                    });
                };
            }
        };
    }
]);
