angular.module("app").directive('orgSearch', ['$uin', '$dictionary', '$declaration', '$locales', '$modal', '$rootScope', '$robot', '$error', '$session',
    function ($uin, $dictionary, $declaration, $locales, $modal, $rootScope, $robot, $error, $session) {
        return {
            scope: {
                bin: '=',
                cancel: '&?'
            },
            replace: true,
            restrict: 'E',
            transclude: true,
            templateUrl: "kit/directives/uin/org-search.html",
            controller: function ($scope) {

            },
            link: function (scope, element, attrs, model) {


                function reset() {
                    scope.viewModel = {
                        filter: {
                            name: "",
                            flowner: "",
                            ulowner: "",
                            orgType: null,
                            licType: null
                        },
                        errors: {
                            name: {},
                            flowner: {},
                            ulowner: {},
                            emptyFilter: false
                        },
                        nameController: null,
                        auxnameController: null,
                        flownerController: null,
                        ulownerController: null,

                        orgTypes: null,
                        licTypes: null,

                        auxFields: false,

                        results: {
                            page: 0,
                            pages: 0,
                            list: null
                        }
                    };
                }

                reset();


                scope.orgTypes = function (){
                    if(!!scope.viewModel.orgTypes) return false;
                    $dictionary.linear('FORMS_OF_INCORPORATION_JUR', function (rs) {
                        scope.viewModel.orgTypes = rs;
                    });
                };
                scope.licTypes = function (){
                    if(!!scope.viewModel.licTypes) return false;
                    $dictionary.linear('FORMS_OF_ORGANIZATION_JUR', function (rs) {
                        scope.viewModel.licTypes = rs;
                    });
                };


                scope.$watch('viewModel.filter', validate, true);

                function validate(){

                    var model = scope.viewModel;
                    var filter = model.filter;

                    function assertSignificantChars(str) {
                        if (!str) var count = 0;
                        else count = str.replace(/\s/g, '').length;
                        return count != 1 && count != 2;
                    }

                    function isEmpty(str) {
                        return str === null || str === undefined || str.replace(/\s/g, '') == "";
                    }

                    if( model.auxFields ){
                        model.errors.name.minLen = scope.auxnameController && scope.auxnameController.$dirty && !isEmpty(filter.name) && !assertSignificantChars(filter.name);
                    } else {
                        model.errors.name.minLen = scope.nameController && scope.nameController.$dirty && !isEmpty(filter.name) && !assertSignificantChars(filter.name);
                    }
                    model.errors.ulowner.minLen = scope.ulownerController && scope.ulownerController.$dirty && !isEmpty(filter.ulowner) && !assertSignificantChars(filter.ulowner);
                    model.errors.flowner.minLen = scope.flownerController && scope.flownerController.$dirty && !isEmpty(filter.flowner)  && !assertSignificantChars(filter.flowner);

                    model.errors.emptyFilter = false;

                }
                validate();

                scope.onSearch = function () {

                    var model = scope.viewModel;
                    var filter = model.filter;

                    $error.resetError();

                    validate();

                    model.errors.emptyFilter = isEmpty(filter.name) && isEmpty(filter.ulowner) && isEmpty(filter.flowner) && filter.orgType === null && filter.licType === null;

                    if (model.errors.name.minLen || model.errors.ulowner.minLen || model.errors.flowner.minLen || model.errors.emptyFilter ) {
                        return;
                    }


                    model.nothingFound = false;

                    var head = filter.flowner && filter.flowner.split(' ') || [];
                    var founder = filter.ulowner && filter.ulowner.split(' ') || [];

                    var rq = {
                        organizationName: filter.name,
                        formOfOrganizationId: model.auxFields && filter.orgType || "",
                        formOfIncorporationId: model.auxFields && filter.licType || "",

                        headLastName: model.auxFields && head[0] || "",
                        headFirstName: model.auxFields && head[1] || "",
                        headMiddleName: model.auxFields && head[2] || "",

                        founderLastName: model.auxFields && founder[0] || "",
                        founderFirstName: model.auxFields && founder[1] || "",
                        founderMiddleName: model.auxFields && founder[2] || ""
                    };

                    $uin.findOrganization(rq).success(function (data) {

                        if (!data || data.length == 0) {
                            $error.setError("uin.search.noResults");
                        } else {
                            //$locales.fixGetters(data);
                            console.log($locales.fixGetters(data), 'atata');
                            var fullness = 0,
                                results = scope.viewModel.results,
                                text = "",
                                y = [],
                                o = 0,
                                p = [0],
                                z = 0;
                            results.page = 0;
                            //results.pages = Math.ceil(data.length / fullness);

                            for(var i=0;i<data.length;i++){
                                text += $locales.current() === "ru" ? data[i].nameRu : $locales.current() === "kz" ? data[i].nameKz : data[i].nameEn;
                                z +=1;
                                if(text.length> ($session.operator ? 250:400) || z == ($session.operator ? 2:4) ) {
                                    text="";
                                    y[y.length] = y.length>0 ? y[y.length]=(i+1)-o:(i+1);
                                    o += y[y.length-1];
                                    p[p.length] = i;
                                    z = 0;
                                }
                                if(i == data.length-1 && text.length>0){
                                    y[y.length] = (i+1)-o;
                                    p[p.length] = i;
                                }
                            }
                            results.pages = p.length-1;

                            results.pagination = _.range(0, results.pages);
                            scope.$watch('viewModel.results.page', function (newVal, oldVal) {
                                fullness = y[results.page];
                                results.list = data.slice(p[results.page], fullness+p[results.page]);
                            });
                        }
                    }).error(function (data) {

                    });
                };
                scope.clear = function () {
                    scope.bin = '';
                    reset();
                    scope.cancel();
                };
                scope.onSelect = function (bin) {
                    scope.bin = bin;
                };
                scope.nextPage = function () {
                    if(scope.viewModel.results.page != scope.viewModel.results.pages-1) scope.viewModel.results.page=scope.viewModel.results.page+1;
                };
                scope.prevPage = function () {
                    if(scope.viewModel.results.page != 0) scope.viewModel.results.page=scope.viewModel.results.page-1;
                };
            }
        };
    }]);
