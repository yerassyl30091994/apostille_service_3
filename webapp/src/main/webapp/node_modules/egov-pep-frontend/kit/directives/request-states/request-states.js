app.directive("requestState", ["$declaration", '$timeout', "$eds", '$modal', '$robot', '$sound', '$http', '$session', '$router', '$settings', '$locales',
    function($declaration, $timeout, $eds, $modal, $robot, $sound, $http, $session, $router, $settings, $locales) {
        return {
            templateUrl: "kit/directives/request-states/request-states.html",
            restrict: "E",
            replace: true,
            transclude: true,
            scope: {
                name: "@"
            },
            controller: ['$scope', '$sce', function($scope, $sce) {
                $scope.$sce = $sce;
                $scope.$router = $router;
                $scope.$settings = $settings;
                $scope.mail={
                    address:'',
                    visible:false,
                    show:false,
                    send:''
                };

                $scope.isUl = function(paramName) {
                    var id = $declaration.state[paramName];
                    var typeDigit = parseInt(id[4]);
                    var isUl = typeDigit > 3;
                    return isUl;
                };

                $scope.getDeclarantIdKey = function() {
                    return $scope.isUl("declarantIdentificationNumber") ? "status.declBin" : "status.declIin";
                };

                $scope.getDeclarantNameKey = function() {
                    return $scope.isUl("declarantIdentificationNumber") ? "status.org" : "status.fio";
                };

                $scope.getRecipientIdKey = function() {
                    return $scope.isUl("recipientUin") ? "status.clientBin" : "status.clientIin";
                };

                $scope.getRecipientNameKey = function() {
                    return $scope.isUl("recipientUin") ? "status.org" : "status.fio";
                };

                $scope.allowAgreementMembers = function () {
                    return !!$declaration.state.approvals && !!$declaration.state.approvals[0]
                        && !!$declaration.state.approvals[0].uin && !$scope.disableGroupAgreement;
                };
            }],
            link: function(scope, elm, attributes) {
                scope.$modal = $modal;
                scope.$eds = $eds;
                scope.showEDS = false;
                scope.disableGroupAgreement = attributes.hasOwnProperty('disableGroupAgreement');
                scope.model = {
                    status: "CREATED"
                };

                scope.buttons = [];
                scope.buttons['finish'] = {
                    active: true,
                    show: $settings.isPod()
                };

                scope.toTime = function(date) {
                    date = new Date(date).getTime();
                    return date;
                };

                scope.isSendToMail = function() {
                    $http.get("rest/send-to-email/is-send-email").success(function(data) {
                        scope.mail.show=data;
                        scope.mail.visible=false;
                    });
                };

                scope.bye = function() {
                    $robot.slightlyOpenedEyes();

                    $sound.play('blessment');

                    $timeout(function() {
                        window.location = '/rubricator';
                    }, 2600);
                };

                var currentStateGetter = function () {
                    if ($settings.isPod()) {
                        scope.isSendToMail();    
                    }
                    scope.norefresh = true;
                    $declaration.getCurrentState().then(function() {
                        scope.requestDate = $declaration.state.appCreationDate;
                        if($declaration && $declaration.state && $declaration.state.approvalProcessInfos && $declaration.state.approvalProcessInfos[0].requestNumber){
                            scope.approvalRequestNumber = $declaration.state.approvalProcessInfos[0].requestNumber;
                        }
                        //в связи с нареканиями на работу PDFViewer-а при распечатке пока отключим его (Круликовский Н.)
                        /*if ($settings.isPod()) {
                         if ($declaration.state.resultsForDownload)
                         _.each($declaration.state.resultsForDownload, function (result) {
                         result.url = ("framework/pdfjs/web/viewer.html?file=" + result.url.replace(/png/, "pdf")).replace(/([^:^\/])\/\//g, '$1/');
                         });
                         }*/
                        // if ($declaration.model.groupAgreement) {
                        //Почему проверка осуществляется по этой переменной которую нужно инициализировать в услуге не понятно, поэтому эту проверку вешаю на то что есть один согласующий
                        if ($declaration.state.approvals && $declaration.state.approvals[0].uin) {
                            scope.agreementMembers = [];
                            angular.forEach($declaration.state.approvals, function(approv) {
                                approv.iin = approv.uin;
                                approv.signed = (approv.status === 'APPROVED') || (approv.status === 'DECLINED') || (approv.status === 'CANCELED');
                                scope.agreementMembers.push(approv);
                            });
                        }
                        $timeout(function() { scope.norefresh = false; }, 3000);
                    });
                };

                scope.resend = function() {
                    $http.get("rest/app/resend/" + $declaration.requestId).then(currentStateGetter);
                };
                scope.refresh = currentStateGetter;

                scope.recreateModel = function() {
                    scope.model = {
                        status: "CREATED"
                    };
                };
                scope.sendToMail = function() {
                    console.log("sendToMail вызван");
                    console.log($declaration.requestId);
                    console.log(scope.mail.address);
                    $http.get("rest/send-to-email/" + $declaration.requestId+"/"+scope.mail.address).success(function() {
                        scope.mail.send=true;
                    }).error(function(rs) {
                        scope.mail.send=false;
                    });
                };

                scope.sendMailClick = function() {
                    if(scope.mail.visible==true){
                        scope.mail.visible=false;
                        scope.mail.send=null;
                    }else{
                        
                        console.log("get email");
                        if (!scope.mail.address) {
                            $http.get("rest/send-to-email/get-email/"+$declaration.state.recipientUin).success(function(mailData) {
                                scope.mail.address = mailData;
                                scope.mail.visible=true;
                            }).error(function(rs) {
                                scope.mail.address = "";
                                scope.mail.visible=true;
                            });
                        } else {
                            scope.mail.visible=true;
                        }
                    }
                };

                scope.pay = function() {
                    window.location = $declaration.state.paymentInformation.paymentUrl;
                };
                /**********************************************/
                /*-------------Переход на шаг оплаты----------*/
                /**********************************************/
                scope.goToPayStep = function() {
                    $declaration.goStep('payment');
                    $declaration.model.stepAccess = true; // придуман для того чтобы иметь возможность перейти на шаг оплаты, когда есть УК.
                };

                /**********************************************/
                /*--------------------КОНЕЦ-------------------*/
                /**********************************************/

                scope.restart = function() {
                    //  $declaration.requestId = null;
                    //  $declaration.goStepByIndex(0);
                    //  $declaration.reset();
                    window.location = window.location.pathname;
                };

                scope.printPDF = function() {
                    var url = $('#printf').get(0).src;
                    if ($('#printfn').length) $('#printfn').remove();
                    var mFrame = $('<iframe id="printfn" name="printfn">');
                    mFrame.css('display', 'none');
                    mFrame.appendTo('body');
                    mFrame.get(0).contentDocument.write('<body onload="window.print();"><embed style="width:100%" src="' + url + '"></body>');
                    mFrame.get(0).contentDocument.close();
                };

                scope.print = function() {
                    var id = "#declaration-document-object";
                    window.frames["printf"].print();
                    return false;
                };

                function findMember(iin) {
                    return _.find(scope.agreementMembers, function(member) {
                        return member.iin == iin;
                    });
                }

                scope.canAgree = function(iin) {
                    var memberInfo = findMember(iin);
                    return (memberInfo.iin == $session.uin) && !memberInfo.signed;
                };

                scope.agree = function(status) {
                    scope.agreementSigningActive = true;
                    $eds.open('agreement', {
                        onCert: function(_edsInfo) {
                            edsInfo = _edsInfo;
                            var request = {
                                "requestNumber": $declaration.requestId,
                                "approvalRequestNumber": scope.approvalRequestNumber ? scope.approvalRequestNumber : null,
                                "uin": $session.uin,
                                "status": status
                            };

                            $http.post("rest/app/xml-approval", request).then(function(rs) {
                                    $eds.apply('agreement', rs.data.xml);
                                },
                                $declaration.onSignError
                            );
                        },
                        onSign: function(signedXml) {
                            $http.post("rest/app/send-eds-approval", {
                                xml: signedXml
                            })
                                .success(function(data) {
                                    location.reload();
                                }).error(function(rs) {});
                        },
                        onError: function() {
                            scope.agreementSigningActive = false;
                            console.error('Error while applying signature');
                        }
                    });
                };

                scope.changeRequestNumber = function() {
                    $declaration.requestId = $declaration.requestId + ' ';
                };
                // Попросили изменить наименование кнопки в услуге K10.09
                scope.checkK1009 = function () {
                    return $router.getActiveLocation().declarationId=="k10-09" ? true:false;
                };
                scope.getGoStatus = function() {
                    var lang = $locales.current();
                    if (lang === "kz") {
                        lang = "kk";
                    }
                    return $declaration.state ? $declaration.state.statusGo.name[lang] : "";
                };

                scope.agreementMembers = [];
                scope.$watch('$declaration.requestId', function (n, o) {
                    if ($declaration.requestId !== null) currentStateGetter();
                });
            }
        };
    }
]);
