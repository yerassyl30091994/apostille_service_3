(function(){
    'use strict';

    var __extends = __extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        __.prototype = b.prototype;
        d.prototype = new __();
    };

    var Misc = (function(){
        function Misc(){}
        Misc.prototype.dataURItoBlob = function(dataURI) {
            var binary = atob(dataURI.split(',')[1]);
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            var array = [];
            for(var i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            return new Blob([new Uint8Array(array)], {type: mimeString});
        };
        return new Misc();
    })();

    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            this.x = x;
            this.y = y;
        }
        Point.prototype.setNext = function (p) {
            this.next = p;
        };
        Point.prototype.getNext = function () {
            return this.next;
        };
        return Point;
    })();

    var PointPool = (function () {
        function PointPool(inst) {
            this.borrowed = 0; //for debugging
            PointPool.instance = this;
            var prev = null;
            for (var i = 0; i < inst; i++) {
                if (i === 0) {
                    this.firstAvailable = new Point();
                    prev = this.firstAvailable;
                }
                else {
                    var p = new Point();
                    prev.setNext(p);
                    prev = p;
                }
            }
        }
        PointPool.prototype.borrow = function (x, y) {
            if (this.firstAvailable == null) {
                throw "Pool exhausted";
            }
            this.borrowed++;
            var p = this.firstAvailable;
            this.firstAvailable = p.getNext();
            p.x = x;
            p.y = y;
            return p;
        };
        PointPool.prototype.returnPoint = function (p) {
            this.borrowed--;
            p.x = 0;
            p.y = 0;
            p.setNext(this.firstAvailable);
            this.firstAvailable = p;
        };
        return PointPool;
    })();

    var Handle = (function () {
        function Handle(x, y, radius) {
            this.over = false;
            this.drag = false;
            this.position = new Point(x, y);
            this.offset = new Point(0, 0);
            this.radius = radius;
        }
        Handle.prototype.setDrag = function (value) {
            this.drag = value;
            this.setOver(value);
        };
        Handle.prototype.draw = function (ctx) {
        };
        Handle.prototype.setOver = function (over) {
            this.over = over;
        };
        Handle.prototype.touchInBounds = function (x, y) {
            return (x > this.position.x - this.radius && x < this.position.x + this.radius && y > this.position.y - this.radius && y < this.position.y + this.radius);
        };
        Handle.prototype.getPosition = function () {
            return this.position;
        };
        Handle.prototype.setPosition = function (x, y) {
            this.position.x = x;
            this.position.y = y;
        };
        return Handle;
    })();

    var CropService = (function () {
        function CropService(width,height) {
            this.width = width;
            this.height = height;
        }
        CropService.prototype.init = function (canvas) {
            this.canvas = canvas;
            this.canvas.width = this.width;
            this.canvas.height = this.height;
            this.ctx = this.canvas.getContext("2d");
        };
        CropService.prototype.DEG2RAD = 0.0174532925;
        return CropService;
    })();

    var DragMarker = (function (_super) {
        __extends(DragMarker, _super);
        function DragMarker(x, y, radius) {
            _super.call(this, x, y, radius);
            this.iconPoints = [];
            this.scaledIconPoints = [];
            this.getDragIconPoints(this.iconPoints, 1);
            this.getDragIconPoints(this.scaledIconPoints, 1.2);
        }
        DragMarker.prototype.draw = function (ctx) {
            if (this.over || this.drag) {
                this.drawIcon(ctx, this.scaledIconPoints);
            }
            else {
                this.drawIcon(ctx, this.iconPoints);
            }
        };
        DragMarker.prototype.getDragIconPoints = function (arr, scale) {
            var maxLength = 17 * scale;
            var arrowWidth = 14 * scale;
            var arrowLength = 8 * scale;
            var connectorThroat = 4 * scale;
            arr.push(PointPool.instance.borrow(-connectorThroat / 2, maxLength - arrowLength));
            arr.push(PointPool.instance.borrow(-arrowWidth / 2, maxLength - arrowLength));
            arr.push(PointPool.instance.borrow(0, maxLength));
            arr.push(PointPool.instance.borrow(arrowWidth / 2, maxLength - arrowLength));
            arr.push(PointPool.instance.borrow(connectorThroat / 2, maxLength - arrowLength));
            arr.push(PointPool.instance.borrow(connectorThroat / 2, connectorThroat / 2));
            arr.push(PointPool.instance.borrow(maxLength - arrowLength, connectorThroat / 2));
            arr.push(PointPool.instance.borrow(maxLength - arrowLength, arrowWidth / 2));
            arr.push(PointPool.instance.borrow(maxLength, 0));
            arr.push(PointPool.instance.borrow(maxLength - arrowLength, -arrowWidth / 2));
            arr.push(PointPool.instance.borrow(maxLength - arrowLength, -connectorThroat / 2));
            arr.push(PointPool.instance.borrow(connectorThroat / 2, -connectorThroat / 2));
            arr.push(PointPool.instance.borrow(connectorThroat / 2, -maxLength + arrowLength));
            arr.push(PointPool.instance.borrow(arrowWidth / 2, -maxLength + arrowLength));
            arr.push(PointPool.instance.borrow(0, -maxLength));
            arr.push(PointPool.instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));
            arr.push(PointPool.instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));
            arr.push(PointPool.instance.borrow(-connectorThroat / 2, -connectorThroat / 2));
            arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));
            arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));
            arr.push(PointPool.instance.borrow(-maxLength, 0));
            arr.push(PointPool.instance.borrow(-maxLength + arrowLength, arrowWidth / 2));
            arr.push(PointPool.instance.borrow(-maxLength + arrowLength, connectorThroat / 2));
            arr.push(PointPool.instance.borrow(-connectorThroat / 2, connectorThroat / 2));
        };
        DragMarker.prototype.drawIcon = function (ctx, points) {
            ctx.beginPath();
            ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);
            for (var k = 0; k < points.length; k++) {
                var p = points[k];
                ctx.lineTo(p.x + this.position.x, p.y + this.position.y);
            }
            ctx.closePath();
            ctx.fillStyle = 'rgba(88, 202, 137,0.3)';
            ctx.fill();
        };
        DragMarker.prototype.recalculatePosition = function (bounds) {
            var c = bounds.getCentre();
            this.setPosition(c.x, c.y);
            PointPool.instance.returnPoint(c);
        };
        return DragMarker;
    })(Handle);

    var Corner = (function (_super) {
        __extends(Corner, _super);
        function Corner(x, y, radius) {
            _super.call(this, x, y, radius);
        }
        Corner.prototype.drawCornerBorder = function (ctx) {
            var sideLength = 10;
            if (this.over || this.drag) {
                sideLength = 12;
            }
            var hDirection = 1;
            var vDirection = 1;
            if (this.horizontalNeighbour.position.x < this.position.x) {
                hDirection = -1;
            }
            if (this.verticalNeighbour.position.y < this.position.y) {
                vDirection = -1;
            }
            ctx.beginPath();
            ctx.lineJoin = "miter";
            ctx.moveTo(this.position.x, this.position.y);
            ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y);
            //ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y + (sideLength * vDirection));
            ctx.lineTo(this.position.x, this.position.y + (sideLength * vDirection));
            ctx.lineTo(this.position.x, this.position.y);
            ctx.closePath();
            ctx.lineWidth = 1;
            ctx.strokeStyle = 'rgba(88, 88, 88,1)';
            ctx.stroke();
        };
        Corner.prototype.drawCornerFill = function (ctx) {
            var sideLength = 10;
            if (this.over || this.drag) {
                sideLength = 12;
            }
            var hDirection = 1;
            var vDirection = 1;
            if (this.horizontalNeighbour.position.x < this.position.x) {
                hDirection = -1;
            }
            if (this.verticalNeighbour.position.y < this.position.y) {
                vDirection = -1;
            }
            ctx.beginPath();
            ctx.moveTo(this.position.x, this.position.y);
            ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y);
            //ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y + (sideLength * vDirection));
            ctx.lineTo(this.position.x, this.position.y + (sideLength * vDirection));
            ctx.lineTo(this.position.x, this.position.y);
            ctx.closePath();
            ctx.fillStyle = 'rgba(88, 88, 88,1)';
            ctx.fill();
        };
        Corner.prototype.moveX = function (x) {
            this.setPosition(x, this.position.y);
        };
        Corner.prototype.moveY = function (y) {
            this.setPosition(this.position.x, y);
        };
        Corner.prototype.move = function (x, y) {
            this.setPosition(x, y);
            this.verticalNeighbour.moveX(x);
            this.horizontalNeighbour.moveY(y);
        };
        Corner.prototype.addHorizontalNeighbour = function (neighbour) {
            this.horizontalNeighbour = neighbour;
        };
        Corner.prototype.addVerticalNeighbour = function (neighbour) {
            this.verticalNeighbour = neighbour;
        };
        Corner.prototype.getHorizontalNeighbour = function () {
            return this.horizontalNeighbour;
        };
        Corner.prototype.getVerticalNeighbour = function () {
            return this.verticalNeighbour;
        };
        Corner.prototype.draw = function (ctx) {
            this.drawCornerFill(ctx);
            this.drawCornerBorder(ctx);
        };
        return Corner;
    })(Handle);

    var Bounds = (function () {
        function Bounds(x, y, width, height) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            this.left = x;
            this.right = x + width;
            this.top = y;
            this.bottom = y + height;
        }
        Bounds.prototype.getWidth = function () {
            return this.right - this.left;
        };
        Bounds.prototype.getHeight = function () {
            return this.bottom - this.top;
        };
        Bounds.prototype.getCentre = function () {
            var w = this.getWidth();
            var h = this.getHeight();
            return PointPool.instance.borrow(this.left + (w / 2), this.top + (h / 2));
        };
        return Bounds;
    })();

    var CropTouch = (function () {
        function CropTouch(x, y, id) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (id === void 0) { id = 0; }
            this.id = 0;
            this.x = x;
            this.y = y;
            this.id = id;
        }
        return CropTouch;
    })();

    var CropBoard = (function () {
        function CropBoard(canvas, x, y, cwidth, cheight, keepAspect, touchRadius, width, height) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = 500; }
            if (height === void 0) { height = 300; }
            if (cwidth === void 0) { cwidth = 100; }
            if (cheight === void 0) { cheight = 50; }
            if (keepAspect === void 0) { keepAspect = true; }
            if (touchRadius === void 0) { touchRadius = 20; }
            this.events = {};
            this.width = width;
            this.height = height;
            this.cropWidth = cwidth;
            this.cropHeight = cheight;
            this.keepAspect = keepAspect;
            this.touchRadius = touchRadius;
            this.aspectRatio = 0;
            this.currentDragTouches = [];
            this.isMouseDown = false;
            this.ratioW = 1;
            this.ratioH = 1;
            this.fileType = 'png';
            this.imageSet = false;
            this.pointPool = new PointPool(200);
            new CropService(width,height).init(canvas);
            this.buffer = document.createElement('canvas');
            this.cropCanvas = document.createElement('canvas');
            this.buffer.width = canvas.width;
            this.buffer.height = canvas.height;
            this.tl = new Corner(x, y, touchRadius);
            this.tr = new Corner(x + cwidth, y, touchRadius);
            this.bl = new Corner(x, y + cheight, touchRadius);
            this.br = new Corner(x + cwidth, y + cheight, touchRadius);
            this.tl.addHorizontalNeighbour(this.tr);
            this.tl.addVerticalNeighbour(this.bl);
            this.tr.addHorizontalNeighbour(this.tl);
            this.tr.addVerticalNeighbour(this.br);
            this.bl.addHorizontalNeighbour(this.br);
            this.bl.addVerticalNeighbour(this.tl);
            this.br.addHorizontalNeighbour(this.bl);
            this.br.addVerticalNeighbour(this.tr);
            this.markers = [this.tl, this.tr, this.bl, this.br];
            this.center = new DragMarker(x + (cwidth / 2), y + (cheight / 2), touchRadius);
            this.canvas = canvas;
            this.ctx = this.canvas.getContext("2d");
            this.keepAspect = keepAspect;
            this.aspectRatio = cheight / cwidth;
            this.draw(this.ctx);
            this.croppedImage = new Image();
            window.addEventListener('mousemove', this.onMouseMove.bind(this));
            window.addEventListener('mouseup', this.onMouseUp.bind(this));
            canvas.addEventListener('mousedown', this.onMouseDown.bind(this));
            window.addEventListener('touchmove', this.onTouchMove.bind(this), false);
            canvas.addEventListener('touchstart', this.onTouchStart.bind(this), false);
            window.addEventListener('touchend', this.onTouchEnd.bind(this), false);

        }
        CropBoard.prototype.on = function(names, handler) {
            var events = this.events;
            names.split(' ').forEach(function(name) {
                if (!events[name]) {
                    events[name] = [];
                }
                events[name].push(handler);
            });
            return this;
        };
        CropBoard.prototype.trigger = function(name, args) {
            angular.forEach(this.events[name], function(handler) {
                handler.call(null, args);
            });
            return this;
        };
        CropBoard.prototype.resizeCanvas = function (width, height) {
            this.canvas.width = width;
            this.canvas.height = height;
            this.buffer.width = width;
            this.buffer.height = height;
            this.draw(this.ctx);
        };
        CropBoard.prototype.draw = function (ctx) {
            var bounds = this.getBounds();
            if (this.srcImage) {
                ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
                var sourceAspect = this.srcImage.height / this.srcImage.width;
                var canvasAspect = this.canvasHeight / this.canvasWidth;
                var w = this.canvasWidth;
                var h = this.canvasHeight;
                if (canvasAspect > sourceAspect) {
                    w = this.canvasWidth;
                    h = this.canvasWidth * sourceAspect;
                }
                else {
                    h = this.canvasHeight;
                    w = this.canvasHeight / sourceAspect;
                }
                this.ratioW = w / this.srcImage.width;
                this.ratioH = h / this.srcImage.height;
                if (canvasAspect < sourceAspect) {
                    this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, this.buffer.width / 2 - w / 2, 0, w, h);
                }
                else {
                    this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, 0, this.buffer.height / 2 - h / 2, w, h);
                }
                this.buffer.getContext('2d').drawImage(this.canvas, 0, 0, this.canvasWidth, this.canvasHeight);
                ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
                ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
                ctx.drawImage(this.buffer, bounds.left, bounds.top, Math.max(bounds.getWidth(), 1), Math.max(bounds.getHeight(), 1), bounds.left, bounds.top, bounds.getWidth(), bounds.getHeight());
                var marker;
                for (var i = 0; i < this.markers.length; i++) {
                    marker = this.markers[i];
                    marker.draw(ctx);
                }
                this.center.draw(ctx);
                ctx.lineWidth = 1;
                ctx.strokeStyle = 'rgba(255,255,255,1)';
                ctx.strokeRect(bounds.left, bounds.top, bounds.getWidth(), bounds.getHeight());
            }
            else {
                ctx.fillStyle = 'rgba(192,192,192,1)';
                ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            }
        };
        CropBoard.prototype.dragCrop = function (x, y, marker) {
            var bounds = this.getBounds();
            var left = x - (bounds.getWidth() / 2);
            var right = x + (bounds.getWidth() / 2);
            var top = y - (bounds.getHeight() / 2);
            var bottom = y + (bounds.getHeight() / 2);
            if (right >= this.maxXClamp) {
                x = this.maxXClamp - bounds.getWidth() / 2;
            }
            if (left <= this.minXClamp) {
                x = bounds.getWidth() / 2 + this.minXClamp;
            }
            if (top < this.minYClamp) {
                y = bounds.getHeight() / 2 + this.minYClamp;
            }
            if (bottom >= this.maxYClamp) {
                y = this.maxYClamp - bounds.getHeight() / 2;
            }
            this.tl.moveX(x - (bounds.getWidth() / 2));
            this.tl.moveY(y - (bounds.getHeight() / 2));
            this.tr.moveX(x + (bounds.getWidth() / 2));
            this.tr.moveY(y - (bounds.getHeight() / 2));
            this.bl.moveX(x - (bounds.getWidth() / 2));
            this.bl.moveY(y + (bounds.getHeight() / 2));
            this.br.moveX(x + (bounds.getWidth() / 2));
            this.br.moveY(y + (bounds.getHeight() / 2));
            marker.setPosition(x, y);
        };
        CropBoard.prototype.dragCorner = function (x, y, marker) {
            var iX = 0;
            var iY = 0;
            var ax = 0;
            var ay = 0;
            var newHeight = 0;
            var newWidth = 0;
            var newY = 0;
            var newX = 0;
            var anchorMarker;
            var fold = 0;

            if (this.keepAspect) {
                anchorMarker = marker.getHorizontalNeighbour().getVerticalNeighbour();
                ax = anchorMarker.getPosition().x;
                ay = anchorMarker.getPosition().y;
                if (x <= anchorMarker.getPosition().x) {
                    if (y <= anchorMarker.getPosition().y) {
                        iX = ax - (100 / this.aspectRatio);
                        iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                        fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                        if (fold > 0) {
                            newHeight = Math.abs(anchorMarker.getPosition().y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.getPosition().y - newHeight;
                            newX = anchorMarker.getPosition().x - newWidth;
                            marker.move(newX, newY);
                        }
                        else if (fold < 0) {
                            newWidth = Math.abs(anchorMarker.getPosition().x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.getPosition().y - newHeight;
                            newX = anchorMarker.getPosition().x - newWidth;
                            marker.move(newX, newY);
                        }
                    }
                    else {
                        iX = ax - (100 / this.aspectRatio);
                        iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                        fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                        if (fold > 0) {
                            newWidth = Math.abs(anchorMarker.getPosition().x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.getPosition().y + newHeight;
                            newX = anchorMarker.getPosition().x - newWidth;
                            marker.move(newX, newY);
                        }
                        else if (fold < 0) {
                            newHeight = Math.abs(anchorMarker.getPosition().y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.getPosition().y + newHeight;
                            newX = anchorMarker.getPosition().x - newWidth;
                            marker.move(newX, newY);
                        }
                    }
                }
                else {
                    if (y <= anchorMarker.getPosition().y) {
                        iX = ax + (100 / this.aspectRatio);
                        iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                        fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                        if (fold < 0) {
                            newHeight = Math.abs(anchorMarker.getPosition().y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.getPosition().y - newHeight;
                            newX = anchorMarker.getPosition().x + newWidth;
                            marker.move(newX, newY);
                        }
                        else if (fold > 0) {
                            newWidth = Math.abs(anchorMarker.getPosition().x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.getPosition().y - newHeight;
                            newX = anchorMarker.getPosition().x + newWidth;
                            marker.move(newX, newY);
                        }
                    }
                    else {
                        iX = ax + (100 / this.aspectRatio);
                        iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                        fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                        if (fold < 0) {
                            newWidth = Math.abs(anchorMarker.getPosition().x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.getPosition().y + newHeight;
                            newX = anchorMarker.getPosition().x + newWidth;
                            marker.move(newX, newY);
                        }
                        else if (fold > 0) {
                            newHeight = Math.abs(anchorMarker.getPosition().y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.getPosition().y + newHeight;
                            newX = anchorMarker.getPosition().x + newWidth;
                            marker.move(newX, newY);
                        }
                    }
                }
            }
            else {
                marker.move(x, y);
            }
            this.center.recalculatePosition(this.getBounds());
        };
        CropBoard.prototype.getSide = function (a, b, c) {
            var n = this.sign((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));
            //TODO move the return of the pools to outside of this function
            PointPool.instance.returnPoint(a);
            PointPool.instance.returnPoint(c);
            return n;
        };
        CropBoard.prototype.sign = function (x) {
            if (+x === x) {
                return (x === 0) ? x : (x > 0) ? 1 : -1;
            }
            return NaN;
        };
        CropBoard.prototype.handleRelease = function (newCropTouch) {

            if(newCropTouch==null)
            {
                console.log("Release null");
                return;
            }
            var index = 0;
            for (var k = 0; k < this.currentDragTouches.length; k++) {
                if (newCropTouch.id == this.currentDragTouches[k].id) {
                    this.currentDragTouches[k].dragHandle.setDrag(false);
                    newCropTouch.dragHandle = null;
                    index = k;
                }
            }
            this.currentDragTouches.splice(index, 1);
            this.draw(this.ctx);
        };
        CropBoard.prototype.handleMove = function (newCropTouch) {
            var matched = false;
            for (var k = 0; k < this.currentDragTouches.length; k++) {
                if (newCropTouch.id == this.currentDragTouches[k].id && this.currentDragTouches[k].dragHandle != null) {
                    var dragTouch = this.currentDragTouches[k];
                    var clampedPositions = this.clampPosition(newCropTouch.x - dragTouch.dragHandle.offset.x, newCropTouch.y - dragTouch.dragHandle.offset.y);
                    newCropTouch.x = clampedPositions.x;
                    newCropTouch.y = clampedPositions.y;
                    PointPool.instance.returnPoint(clampedPositions);
                    if (dragTouch.dragHandle instanceof Corner) {
                        this.dragCorner(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                    }
                    else {
                        this.dragCrop(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                    }
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                for (var i = 0; i < this.markers.length; i++) {
                    var marker = this.markers[i];
                    if (marker.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                        newCropTouch.dragHandle = marker;
                        this.currentDragTouches.push(newCropTouch);
                        marker.setDrag(true);
                        newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.getPosition().x;
                        newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.getPosition().y;
                        this.dragCorner(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                        break;
                    }
                }
                if (newCropTouch.dragHandle == null) {
                    if (this.center.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                        newCropTouch.dragHandle = this.center;
                        this.currentDragTouches.push(newCropTouch);
                        newCropTouch.dragHandle.setDrag(true);
                        newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.getPosition().x;
                        newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.getPosition().y;
                        this.dragCrop(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                    }
                }
            }
        };
        CropBoard.prototype.updateClampBounds = function () {
            var sourceAspect = this.srcImage.height / this.srcImage.width;
            var canvasAspect = this.canvas.height / this.canvas.width;
            var w = this.canvas.width;
            var h = this.canvas.height;
            if (canvasAspect > sourceAspect) {
                w = this.canvas.width;
                h = this.canvas.width * sourceAspect;
            }
            else {
                h = this.canvas.height;
                w = this.canvas.height / sourceAspect;
            }
            this.minXClamp = this.canvas.width / 2 - w / 2;
            this.minYClamp = this.canvas.height / 2 - h / 2;
            this.maxXClamp = this.canvas.width / 2 + w / 2;
            this.maxYClamp = this.canvas.height / 2 + h / 2;
        };
        CropBoard.prototype.clampPosition = function (x, y) {
            if (x < this.minXClamp) {
                x = this.minXClamp;
            }
            if (x > this.maxXClamp) {
                x = this.maxXClamp;
            }
            if (y < this.minYClamp) {
                y = this.minYClamp;
            }
            if (y > this.maxYClamp) {
                y = this.maxYClamp;
            }
            return PointPool.instance.borrow(x, y);
        };
        CropBoard.prototype.isImageSet = function () {
            return this.imageSet;
        };
        CropBoard.prototype.setImage = function (img) {
            if (!img) {
                throw "Image is null";
            }
            this.imageSet = true;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            var bufferContext = this.buffer.getContext('2d');
            bufferContext.clearRect(0, 0, this.buffer.width, this.buffer.height);
            var splitName = img.src.split('.');
            var fileType = splitName[1];
            if (fileType == 'png' || fileType == 'jpg') {
                this.fileType = fileType;
            }
            this.srcImage = img;
            this.updateClampBounds();
            var sourceAspect = this.srcImage.height / this.srcImage.width;
            var cropBounds = this.getBounds();
            var cropAspect = cropBounds.getHeight() / cropBounds.getWidth();
            var w = this.canvas.width;
            var h = this.canvas.height;
            this.canvasWidth = w;
            this.canvasHeight = h;
            var cX = this.canvas.width / 2;
            var cY = this.canvas.height / 2;
            var tlPos = PointPool.instance.borrow(cX - cropBounds.getWidth() / 2, cY + cropBounds.getHeight() / 2);
            var trPos = PointPool.instance.borrow(cX + cropBounds.getWidth() / 2, cY + cropBounds.getHeight() / 2);
            var blPos = PointPool.instance.borrow(cX - cropBounds.getWidth() / 2, cY - cropBounds.getHeight() / 2);
            var brPos = PointPool.instance.borrow(cX + cropBounds.getWidth() / 2, cY - cropBounds.getHeight() / 2);
            this.tl.setPosition(tlPos.x, tlPos.y);
            this.tr.setPosition(trPos.x, trPos.y);
            this.bl.setPosition(blPos.x, blPos.y);
            this.br.setPosition(brPos.x, brPos.y);
            PointPool.instance.returnPoint(tlPos);
            PointPool.instance.returnPoint(trPos);
            PointPool.instance.returnPoint(blPos);
            PointPool.instance.returnPoint(brPos);
            this.center.setPosition(cX, cY);
            if (cropAspect > sourceAspect) {
                var imageH = Math.min(w * sourceAspect, h);
                if (cropBounds.getHeight() > imageH) {
                    var cropW = imageH / cropAspect;
                    tlPos = PointPool.instance.borrow(cX - cropW / 2, cY + imageH / 2);
                    trPos = PointPool.instance.borrow(cX + cropW / 2, cY + imageH / 2);
                    blPos = PointPool.instance.borrow(cX - cropW / 2, cY - imageH / 2);
                    brPos = PointPool.instance.borrow(cX + cropW / 2, cY - imageH / 2);
                    this.tl.setPosition(tlPos.x, tlPos.y);
                    this.tr.setPosition(trPos.x, trPos.y);
                    this.bl.setPosition(blPos.x, blPos.y);
                    this.br.setPosition(brPos.x, brPos.y);
                    PointPool.instance.returnPoint(tlPos);
                    PointPool.instance.returnPoint(trPos);
                    PointPool.instance.returnPoint(blPos);
                    PointPool.instance.returnPoint(brPos);
                }
            }
            else if (cropAspect < sourceAspect) {
                var imageW = Math.min(h / sourceAspect, w);
                if (cropBounds.getWidth() > imageW) {
                    var cropH = imageW * cropAspect;
                    tlPos = PointPool.instance.borrow(cX - imageW / 2, cY + cropH / 2);
                    trPos = PointPool.instance.borrow(cX + imageW / 2, cY + cropH / 2);
                    blPos = PointPool.instance.borrow(cX - imageW / 2, cY - cropH / 2);
                    brPos = PointPool.instance.borrow(cX + imageW / 2, cY - cropH / 2);
                    this.tl.setPosition(tlPos.x, tlPos.y);
                    this.tr.setPosition(trPos.x, trPos.y);
                    this.bl.setPosition(blPos.x, blPos.y);
                    this.br.setPosition(brPos.x, brPos.y);
                    PointPool.instance.returnPoint(tlPos);
                    PointPool.instance.returnPoint(trPos);
                    PointPool.instance.returnPoint(blPos);
                    PointPool.instance.returnPoint(brPos);
                }
            }
            this.vertSquashRatio = this.detectVerticalSquash(img);
            this.draw(this.ctx);
            this.trigger("cropped-image",this.getCroppedImage(this.cropWidth, this.cropHeight).src);
        };
        CropBoard.prototype.getCroppedImage = function (fillWidth, fillHeight) {
            var bounds = this.getBounds();
            if (!this.srcImage) {
                throw "Source image not set.";
            }
            if (fillWidth && fillHeight) {
                var sourceAspect = this.srcImage.height / this.srcImage.width;
                var canvasAspect = this.canvas.height / this.canvas.width;
                var w = this.canvas.width;
                var h = this.canvas.height;
                if (canvasAspect > sourceAspect) {
                    w = this.canvas.width;
                    h = this.canvas.width * sourceAspect;
                }
                else if (canvasAspect < sourceAspect) {
                    h = this.canvas.height;
                    w = this.canvas.height / sourceAspect;
                }
                else {
                    h = this.canvas.height;
                    w = this.canvas.width;
                }
                this.ratioW = w / this.srcImage.width;
                this.ratioH = h / this.srcImage.height;
                this.cropCanvas.width = fillWidth;
                this.cropCanvas.height = fillHeight;
                var offsetH = (this.buffer.height - h) / 2 / this.ratioH;
                var offsetW = (this.buffer.width - w) / 2 / this.ratioW;
                var boundsMultiWidth = 1;
                var boundsMultiHeight = 1;
                if (this.ratioW < 1) {
                    boundsMultiWidth = this.ratioW;
                }
                if (this.ratioH < 1) {
                    boundsMultiHeight = this.ratioH;
                }
                this.drawImageIOSFix(this.cropCanvas.getContext('2d'), this.srcImage, Math.max(Math.round((bounds.left) / this.ratioW - offsetW), 0), Math.max(Math.round(bounds.top / this.ratioH - offsetH), 0), Math.max(Math.round(bounds.getWidth() / boundsMultiWidth), 1), Math.max(Math.round(bounds.getHeight() / boundsMultiHeight), 1), 0, 0, fillWidth, fillHeight);
                this.croppedImage.width = fillWidth;
                this.croppedImage.height = fillHeight;
            }
            else {
                this.cropCanvas.width = Math.max(bounds.getWidth(), 1);
                this.cropCanvas.height = Math.max(bounds.getHeight(), 1);
                this.cropCanvas.getContext('2d').drawImage(this.buffer, bounds.left, bounds.top, Math.max(bounds.getWidth(), 1), Math.max(bounds.getHeight(), 1), 0, 0, bounds.getWidth(), bounds.getHeight());
                this.croppedImage.width = this.cropCanvas.width;
                this.croppedImage.height = this.cropCanvas.height;
            }
            this.croppedImage.src = this.cropCanvas.toDataURL("image/" + this.fileType);
            return this.croppedImage;
        };
        CropBoard.prototype.getBounds = function () {
            var minX = Number.MAX_VALUE;
            var minY = Number.MAX_VALUE;
            var maxX = -Number.MAX_VALUE;
            var maxY = -Number.MAX_VALUE;
            for (var i = 0; i < this.markers.length; i++) {
                var marker = this.markers[i];
                if (marker.getPosition().x < minX) {
                    minX = marker.getPosition().x;
                }
                if (marker.getPosition().x > maxX) {
                    maxX = marker.getPosition().x;
                }
                if (marker.getPosition().y < minY) {
                    minY = marker.getPosition().y;
                }
                if (marker.getPosition().y > maxY) {
                    maxY = marker.getPosition().y;
                }
            }
            var bounds = new Bounds();
            bounds.left = minX;
            bounds.right = maxX;
            bounds.top = minY;
            bounds.bottom = maxY;
            return bounds;
        };
        CropBoard.prototype.getMousePos = function (canvas, evt) {
            var rect = canvas.getBoundingClientRect();
            return PointPool.instance.borrow(evt.clientX - rect.left, evt.clientY - rect.top);
        };
        CropBoard.prototype.getTouchPos = function (canvas, touch) {
            var rect = canvas.getBoundingClientRect();
            return PointPool.instance.borrow(touch.clientX - rect.left, touch.clientY - rect.top);
        };
        CropBoard.prototype.onTouchMove = function (e) {
            e.preventDefault();
            if (e.touches.length >= 1) {
                for (var i = 0; i < e.touches.length; i++) {
                    var touch = e.touches[i];
                    var touchPosition = this.getTouchPos(this.canvas, touch);
                    var cropTouch = new CropTouch(touchPosition.x, touchPosition.y, touch.identifier);
                    PointPool.instance.returnPoint(touchPosition);
                    this.move(cropTouch, e);
                }
            }
            this.draw(this.ctx);
        };
        CropBoard.prototype.onMouseMove = function (e) {
            var mousePosition = this.getMousePos(this.canvas, e);
            this.move(new CropTouch(mousePosition.x, mousePosition.y, 0), e);
            var dragTouch = this.getDragTouchForID(0);
            if (dragTouch) {
                dragTouch.x = mousePosition.x;
                dragTouch.y = mousePosition.y;
            }
            else {
                dragTouch = new CropTouch(mousePosition.x, mousePosition.y, 0);
            }
            PointPool.instance.returnPoint(mousePosition);
            this.drawCursors(dragTouch, e);
            this.draw(this.ctx);
        };
        CropBoard.prototype.move = function (cropTouch, e) {
            if (this.isMouseDown) {
                this.handleMove(cropTouch);
            }
        };
        CropBoard.prototype.getDragTouchForID = function (id) {
            for (var i = 0; i < this.currentDragTouches.length; i++) {
                if (id == this.currentDragTouches[i].id) {
                    return this.currentDragTouches[i];
                }
            }
        };
        CropBoard.prototype.drawCursors = function (cropTouch, e) {
            var cursorDrawn = false;
            if (cropTouch != null) {
                if (cropTouch.dragHandle == this.center) {
                    this.canvas.style.cursor = 'move';
                    cursorDrawn = true;
                }
                if (cropTouch.dragHandle != null && cropTouch.dragHandle instanceof Corner) {
                    this.drawCornerCursor(cropTouch.dragHandle, cropTouch.dragHandle.getPosition().x, cropTouch.dragHandle.getPosition().y, e);
                    cursorDrawn = true;
                }
            }
            var didDraw = false;
            if (!cursorDrawn) {
                for (var i = 0; i < this.markers.length; i++) {
                    didDraw = didDraw || this.drawCornerCursor(this.markers[i], cropTouch.x, cropTouch.y, e);
                }
                if (!didDraw) {
                    var el = e.target;
                    el.style.cursor = 'initial';
                }
            }
            if (!didDraw && !cursorDrawn && this.center.touchInBounds(cropTouch.x, cropTouch.y)) {
                this.center.setOver(true);
                this.canvas.style.cursor = 'move';
            }
            else {
                this.center.setOver(false);
            }
        };
        CropBoard.prototype.drawCornerCursor = function (marker, x, y, e) {
            var el;
            if (marker.touchInBounds(x, y)) {
                marker.setOver(true);
                if (marker.getHorizontalNeighbour().getPosition().x > marker.getPosition().x) {
                    if (marker.getVerticalNeighbour().getPosition().y > marker.getPosition().y) {
                        el = e.target;
                        el.style.cursor = 'nwse-resize';
                    }
                    else {
                        el = e.target;
                        el.style.cursor = 'nesw-resize';
                    }
                }
                else {
                    if (marker.getVerticalNeighbour().getPosition().y > marker.getPosition().y) {
                        el = e.target;
                        el.style.cursor = 'nesw-resize';
                    }
                    else {
                        el = e.target;
                        el.style.cursor = 'nwse-resize';
                    }
                }
                return true;
            }
            marker.setOver(false);
            return false;
        };
        CropBoard.prototype.onMouseDown = function (e) {
            this.isMouseDown = true;
        };
        CropBoard.prototype.onTouchStart = function (e) {
            this.isMouseDown = true;
        };
        CropBoard.prototype.onTouchEnd = function (e) {
            for (var i = 0; i < e.changedTouches.length; i++) {
                var touch = e.changedTouches[i];
                var dragTouch = this.getDragTouchForID(touch.identifier);
                if (dragTouch != null) {
                    if (dragTouch.dragHandle instanceof Corner || dragTouch.dragHandle instanceof DragMarker) {
                        dragTouch.dragHandle.setOver(false);
                    }
                    this.handleRelease(dragTouch);
                }
            }
            if (this.currentDragTouches.length === 0) {
                this.isMouseDown = false;
            }
            if (this.isImageSet()) {
                this.trigger("cropped-image",this.getCroppedImage(this.cropWidth, this.cropHeight).src);
            }
        };
        CropBoard.prototype.onMouseUp = function (e) {
            console.log("MouseUp");
            this.handleRelease(new CropTouch(0, 0, 0));
            if (this.currentDragTouches.length === 0) {
                this.isMouseDown = false;
            }
        };
        //http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
        CropBoard.prototype.drawImageIOSFix = function (ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
            // TODO Works only if whole image is displayed:
            // ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
            // The following works correct also when only a part of the image is displayed:
            ctx.drawImage(img, sx * this.vertSquashRatio, sy * this.vertSquashRatio, sw * this.vertSquashRatio, sh * this.vertSquashRatio, dx, dy, dw, dh);
        };
        CropBoard.prototype.detectVerticalSquash = function (img) {
            var iw = img.naturalWidth, ih = img.naturalHeight;
            var canvas = document.createElement('canvas');
            canvas.width = 1;
            canvas.height = ih;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            var data = ctx.getImageData(0, 0, 1, ih).data;
            // search image edge pixel position in case it is squashed vertically.
            var sy = 0;
            var ey = ih;
            var py = ih;
            while (py > sy) {
                var alpha = data[(py - 1) * 4 + 3];
                if (alpha === 0) {
                    ey = py;
                }
                else {
                    sy = py;
                }
                py = (ey + sy) >> 1;
            }
            var ratio = (py / ih);
            return (ratio === 0) ? 1 : ratio;
        };
        CropBoard.prototype.onMouseDown = function (e) {
            this.isMouseDown = true;
        };
        CropBoard.prototype.onMouseUp = function (e) {
            if (this.isImageSet()) {
                this.isMouseDown = false;
                this.handleRelease(new CropTouch(0,0,0));
                this.trigger("cropped-image",this.getCroppedImage(this.cropWidth, this.cropHeight).src);
            }
        };

        return CropBoard;
    })();

    var ImageCropper = function($document,$window,$timeout,$http,$error) {
        return {
            restrict: 'E',
            scope: {
                image: "=",
                croppedImage: "=", // cropped image
                croppedData: "=", // hed uploaded data
                cropWidth: "=", // crop size by width
                cropHeight: "=", // crop size by height
                keepAspect: "@", // proportional resize
                touchRadius: "@", // touch redious over corners
                width: "=", // canvas size by width
                height: "=", // canvas size by height
                // Todo Add size restriction of the image
                maxSize: "=",
                // Todo Add type restriction of the image
                access: "@",
                fileName: "@" // file name
            },
            templateUrl: 'kit/directives/imageCropper/image-cropper.html',
            link: function (scope, element) {
                var crop; // CropBoard instance

                // Init on DOM ready
                angular.element(document).ready(function() {
                    var el = angular.element(element[0]),
                        canvas = el.find('canvas')[0],
                        cWidth = scope.cropWidth,
                        cHeight = scope.cropHeight;

                    crop = new CropBoard(canvas, canvas.width/2-cWidth/2, canvas.height/2-cHeight/2, cWidth, cHeight,
                        scope.keepAspect, scope.touchRadius, scope.width, scope.height)
                        .on("cropped-image",function(src) {
                            scope.croppedImage = src;
                            scope.$apply(); // Refresh scope
                        });

                    // Attach change event to file input
                    el.find('.image-loader[type=file]').bind("change", function (changeEvent) {
                        changeEvent.preventDefault();
                        scope.file = null;
                        scope.croppedData = null;
                        var reader = new FileReader();
                        reader.onload = function (loadEvent) {
                            $timeout(function () {
                                scope.image = loadEvent.target.result;
                                scope.file = Misc.dataURItoBlob(loadEvent.target.result);
                                scope.file.name = changeEvent.target.files[0].name;
                            },0);
                        };
                        reader.readAsDataURL(changeEvent.target.files[0]);
                    });
                });

                // Send cropped image to hed
                scope.cropUploader = function() {
                    scope.croppedData = null;
                    var form = new FormData();

                    scope.cropedFile = Misc.dataURItoBlob(scope.croppedImage);
                    scope.cropedFile.name = scope.file.name;

                    form.append("file", scope.cropedFile);
                    if (scope.fileName) {
                        if (scope.cropedFile.name.includes('.')) {
                            form.append('document-name', scope.fileName + scope.cropedFile.name.substring(scope.cropedFile.name.lastIndexOf('.'), scope.cropedFile.name.length));
                        } else {
                            form.append('document-name', scope.fileName)
                        }
                    } else {
                        form.append('document-name', scope.cropedFile.name);
                    }
                    form.append('document-type', "D010");
                    $http.post("rest/hed/upload", form, {
                        transformRequest: angular.identity,
                        headers: {
                            "Content-Type": undefined
                        }
                    }).success(function (data) {
                        if(data.processStatus.code != 'SD-001' && data.processStatus.code != 'SD-002'){
                            $error.setError("p66-05.codeError", data.processStatus.code + " " + data.processStatus.message);
                        }else{
                            scope.croppedData = data;
                        }
                    }).error(function (data, status){
                        $error.setError("p66-05.codeError", status + "! " + data + data.substr(1));
                    });
                };

                scope.$watch('image',
                    function( newValue ) {
                        if(newValue) {
                            var imageObj = new Image();
                            imageObj.addEventListener("load", function () {
                                crop.setImage(imageObj);
                                scope.croppedImage = crop.getCroppedImage(scope.cropWidth, scope.cropHeight).src;
                                scope.$apply(); // Refresh scope
                            }, false);
                            imageObj.src = newValue;
                        }
                    }
                );
            }
        };
    };

    angular
        .module('app')
        .directive('imageCropper', ['$document','$window','$timeout','$http', '$error', ImageCropper]);
})();