angular.module("app").directive('uin', ['$uin', '$dictionary', '$declaration', '$locales', '$rootScope', '$robot', '$error', '$translate',
    function ($uin, $dictionary, $declaration, $locales, $rootScope, $robot, $error, $translate) {
        return {
            scope: {
                uin: '=',
                info: '=',
                title: '@',
                ngTitle: '@',
                type: '@',//bin, iin, uin
                hideSearch: '@',//если type не bin, поиск и так будет недоступен
                notRequired:'=',
                uinStatus:'@', //Проверка статуса. Детали в readme
                checkAge:'@', //Проверка на возраст
                hideInfo:'@',//Скрывать результат поиска
                checkActualDocuments:'@' //Проверка на актуальность документов
            },
            replace: true,
            restrict: 'E',
            transclude: true,
            templateUrl: "kit/directives/uin/uin-template.html",
            controller: function ($scope) {
            },
            link: function (scope, element, attrs, model) {

				scope.$locales = $locales;

                function getUinType(){
                    if( scope.type == 'bin' ) return 'bin';
                    if( scope.type == 'iin' ) return 'iin';
                    if( scope.type == 'uin' ) {
                        if( !$uin.isValidUin(scope.viewModel.inputModel)) return 'uin';
                        if( $uin.isBin(scope.viewModel.inputModel)) return 'bin';
                        if( $uin.isIin(scope.viewModel.inputModel)) return 'iin';
                    }
                }

                $translate.alias(scope, 'uinType', function(){
                   return 'uin.type.' + getUinType();
                });

                $translate.alias(scope, 'age', function(){
                   return scope.checkAge;
                });

                $translate.alias(scope, 'gbdName', function(){
                    if( getUinType() == 'bin' ) return 'uin.gbd.ul';
                    if( getUinType() == 'iin' ) return 'uin.gbd.fl';
                });

                $translate.alias(scope, 'uinHelpMessage', function(){
                    if( getUinType() == 'bin' ) return 'uin.help.messages.bin';
                    if( getUinType() == 'iin' ) return 'uin.help.messages.iin';
                });

                scope.type = scope.type || 'uin';

                if (!$uin.isIin(scope.uin)) {
                    scope.uin = "";
                }

                function reset() {
                    scope.viewModel = {
                        errors: {
                            isEmpty: false,
                            isInvalid: false,
                            isUnknown: false,
                            badStatus: false,
                            noConnection: false
                        },
                        haveErrors: false,

                        warnings: {
                            lengthWarning: false
                        },
                        haveWarnings: false,

                        validationMessageMinified: false,

                        uinFocus: false,
                        info: null,

                        remoteCheckFinished: false,
                        remoteCheckError: false,

                        inputModel: scope.uin,

                        search: false
                    };
                }

                reset();

                scope.$watch("uin", function (val) {

                    //todo убрать костыль. TODO: Если это убрать, то при правке/не правильном ИИН очищается вся модель.
                    //Скажем ввел 12 цифр, ошибся на последнем хочет поправить удаляет последнюю цифру и если не будет uinReset то все сразу очистится
                    if( uinReset ) {
                        uinReset = false;
                        return;
                    }

                    val = String(val || "");
                    if (scope.viewModel.inputModel != val && !scope.viewModel.search) {
                        onUinChanged(val);
                    }
                });

                scope.$watch("viewModel.search", function (val) {
                    scope.onChange(scope.inputController ? scope.inputController.$viewValue : scope.uin);
                });

                function onUinChanged(val) {
                    reset();

                    if(scope.viewModel.inputModel != val){
                        scope.onChange(val);
                    }
                }

                scope.$watch("viewModel.inputModel", function (val) {
                    scope.onChange(val);
                });

                scope.$watch("inputController.$dirty", function (val) {
                    if( scope.inputController ) scope.onChange(scope.inputController.$viewValue);
                });

                var uinReset = false;//todo убрать костыль
                scope.onChange = function (val) {
                    var model = scope.viewModel;
                    model.remoteCheckFinished = false;
                    model.remoteCheckError = false;
                    model.info = null;
                    if (validate(val)) {

                        $uin[ $uin.isIin(val) ? 'getIndividualShortInfo' : 'getOrganization' ](val)
                            .success(function (data) {
                                model.remoteCheckFinished = true;
                                model.info = data;
                                if (validate(val)) {
                                    scope.uin = val;
                                    scope.viewModel.inputModel = val;
                                    if(typeof scope.info !== 'undefined'){
                                        scope.info = data;
                                    }
                                }else{
                                    uinReset = true;//todo убрать костыль
                                    model.info = null;
                                    if(typeof scope.info !== 'undefined')scope.info = null;
                                    scope.uin = null;
                                }
                            })
                            .error(function (data, status) {
                                model.remoteCheckFinished = true;
                                if (status == '404') {
                                    $robot.wonder();
                                } else {
                                    model.remoteCheckError = true;
                                    $error.setError("uin.search.noConnection");
                                    $robot.connectionError();
                                }
                                validate(val);
                            });
                    } else {
                        uinReset = true;//todo убрать костыль
                        model.info = null;
                        if(typeof scope.info !== 'undefined')scope.info = null;
                        scope.uin = null;
                    }
                };


                scope.reconnect = function () {
                    var model = scope.viewModel;
                    scope.onChange(scope.inputController.$viewValue);
                };

                function validate(uin) {
                    if(uin && uin.length > 7) {
                        var model = scope.viewModel,
                            errors = scope.viewModel.errors,
                            warnings = scope.viewModel.warnings;

                        var isDirty = scope.inputController && scope.inputController.$dirty;

                        errors.isEmpty = isDirty && _.isEmpty(uin);

                        var isFullLength = uin.length == 12;

                        var actualDocuments = typeof scope.checkActualDocuments == 'undefined' ? false : model.info && !model.info.hasActualDocuments;

                        errors.isInvalid = isDirty && !errors.isEmpty && !$uin[{iin: 'isIin', bin: 'isBin', uin: 'isUin' }[getUinType()]](uin);
                        errors.noConnection = isDirty && !errors.isInvalid && model.remoteCheckFinished && model.remoteCheckError;
                        errors.isUnknown = isDirty && !errors.noConnection && model.remoteCheckFinished && !model.info;
                        errors.badStatus = model.info && model.info.status && model.info.iin && isDirty && !errors.isUnknown && model.remoteCheckFinished && _.contains($uin.checkStatus(scope.uinStatus), model.info.status) ||
                                           model.info && model.info.status && model.info.iin && isDirty && !errors.isUnknown && model.remoteCheckFinished && actualDocuments;
                        errors.badBinStatus = model.info && model.info.status && isDirty && !errors.isUnknown && model.remoteCheckFinished && _.contains($uin.checkStatus(scope.uinStatus), model.info.status.code);
                        errors.badAge = model.info && model.info.dateOfBirth && isDirty && !errors.isUnknown && model.remoteCheckFinished && $uin.checkAge(model.info.dateOfBirth, scope.checkAge);

                        model.haveErrors = _.contains(_.values(errors), true);

                        warnings.lengthWarning = isDirty && uin && uin.length > 7 && uin.length < 12;
                        model.haveWarnings = _.contains(_.values(warnings), true);

                        return !model.haveErrors && !model.haveWarnings && isFullLength;
                    }else{
                        return false;
                    }
                }
            }
        };
    }]);
