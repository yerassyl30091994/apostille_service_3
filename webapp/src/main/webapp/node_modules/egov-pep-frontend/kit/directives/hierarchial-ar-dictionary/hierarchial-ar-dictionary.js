angular.module("app").directive("hierarchialArDictionary", ['$http', '$locales', '$modal', '$error',
    function ($http, $locales, $modal, $error) {
        return {
            templateUrl: "kit/directives/hierarchial-ar-dictionary/hierarchial-ar-dictionary.html",
            restrict: "E",
            replace: true,
            transclude: true,
            scope: {
                region: '='
            },
            controller: function ($scope) {
            },
            link: function (scope, elm, attrs) {
                var Region = function () {
                    this.address = {
                        id: null,
                        cato: [],
                        geonim: null,
                        name: {
                            full: null,
                            fullKz: null,
                            fullRu: null,
                            fullEn: null,
                            short: null,
                            kk: null,
                            ru: null,
                            en: null
                        },
                        type: {
                            code: null
                        }
                    };
                };

                scope.$modal = $modal;
                scope.selectIsAvailable = false;
                scope.path = [];
                scope.viewModel = {
                    selected: [],
                    elements: [],
                    elementTextPath: 'name' + $locales.current().capitalize()
                };

                scope.region = new Region();
                var tmpRegion = new Region();

                // first, search by geonim, if not found search by atunit
                // case atunit found and geonim not found: село без улиц и только с одним домом или земельным участком, редкий случай
                var atunitmap = [];

                // отслеживаем изменение локали, в случае чего,
                scope.$watch(function () {
                    return $locales.current();
                }, function () {
                    if (scope.region) {
                        var propertyName = 'full' + $locales.current().capitalize();

                        // меняем fullname у предварительно выбранного региона
                        scope.region.address.name.full = scope.region.address.name[propertyName];

                        // если регион уже выбирался, то модифицируем у него fullname
                        if (scope.region)
                            scope.region.address.name.full = scope.region.address.name[propertyName];

                        // меняем путь к тексту в комбобоксах
                        scope.viewModel.elementTextPath = 'name' + $locales.current().capitalize();
                    }
                });

                scope.accept = function () {
                    // Чтобы иметь возможность скоректировать уже построенный адрес, допустим в части геонима
                    // Мы обращаемся к ранее полученным данным по региону и вытягиваем atu так как при сохранении он обнуляется.
                    // Если корректировка идет в части atu то брать старые данные по региону нет необходимости
                    if (tmpRegion.address.id === null && scope.region.address.id !== null) {
                        tmpRegion.address.id = scope.region.address.id;
                    }
                    selectElement(scope.path[scope.path.length - 1]);
                    scope.region = tmpRegion;
                    tmpRegion = new Region();
                };

                var watchedIndexes = [];

                function process(items) {
                    angular.forEach(items, function (item) {
                        if (item == null)
                            return;

                        item.nameKz = item.translateProperties.name.kk + ' ' + item.translateProperties.type.value.kk;
                        item.nameRu = item.translateProperties.name.ru + ' ' + item.translateProperties.type.value.ru;
                        item.nameEn = item.translateProperties.name.en + ' ' + item.translateProperties.type.value.en;

                        var propertyName = 'name' + $locales.current().capitalize();
                        item.name = item[propertyName];
                        item.code = item.translateProperties.type.code;
                    });

                    var listenIndex = scope.path.length;
                    scope.viewModel.elements[listenIndex] = items;

                    if (watchedIndexes.indexOf(listenIndex) !== -1)
                        return;

                    // вотчер вешается снова и снова
                    scope.$watch(function () {
                            return scope.viewModel.selected[listenIndex];
                        },
                        function (newvalue, oldvalue) {
                            scope.viewModel.selected = scope.viewModel.selected.slice(0, listenIndex + Number(!newvalue ? 0 : 1));
                            if (scope.viewModel.selected.length === 0) {
                                scope.path = scope.path.slice(0, 1);
                                tmpRegion = new Region();
                                scope.region = new Region();
                                scope.selectIsAvailable = false;
                            } else {
                                if (angular.isUndefined(this.last)) return;
                                scope.path = scope.path.slice(0, listenIndex + 1);
                                selectElement(newvalue ? newvalue : scope.path[scope.path.length - 1]);
                                loadChildElements(newvalue);

                                /**
                                 * Тут происходит проверка на возможность прикрипления к этому узлу объектов учета.
                                 * Если в узле нет информации о ЗУ и ПО, то следует проверить быть может это конечный узел.
                                 * Для этого проверяем является ли узел административно-территориальная единицей и проверяем потомков,
                                 * если нет потомков то проверяем на отсутствие составных частей населенного пункта.
                                 * Если это всеже не АТЕ то остается лишь что это СЧНП. Если в этоге это конечный узел, то
                                 * предоставляем пользователю проверку адреса по нему. Так как существование СЧНП либо АТЕ ради самих себя это странно.
                                 * В ином случае позволяем пользователю конкретизировать адрес.
                                 */
                                scope.selectIsAvailable = (function () {
                                    return (this.groundCount > 0 || this.primaryObjectCount > 0) || (!this.atuCount ? this.geonimCount === 0 : (this.atuCount === 0 && this.geonimCount === 0));
                                }).call(!this.last ? scope.path[scope.path.length - 1] : this.last);
                            }
                        });

                    watchedIndexes.push(listenIndex);
                }

                function loadRootElements() {
                    $http.get("rest/ar/find-at-units/1").success(function (data) {
                        scope.path = [];

                        angular.forEach(data, function (region) {
                            if (region == null)
                                return;

                            region.id += 'a';
                        });
                        process(data);
                        scope.path.push({
                            id: -1,
                            children: data
                        });
                    }).error(function () {
                        $error.setError('Ошибка загрузки данных ИС АР');
                    });
                }

                function loadChildElements(rootElement) {
                    if (!rootElement) return;
                    var rootElementId = rootElement.id.substring(0, rootElement.id.length - 1);
                    $http.get('rest/ar/find-at-units/' + rootElementId).success(function (regionData) {
                        // Бывает ситуация когда в atu идет и геоним, в данном случае эти списки объединяются, и запрос строится по другому.
                        // Однако если мы уже выбираем геоним мы всяко на предыдущем шаге получили atu, строим запрос с учетом этого
                        var parent = tmpRegion.address.id || scope.region.address.id;
                        $http.get('rest/ar/find-geo?at-unit-id=' + (typeof rootElement.atuCount === 'undefined' && parent
                            ? parent + '&parent-geonim-id=' + rootElementId
                            : rootElementId)).success(function (streetData) {
                            angular.forEach(streetData, function (street) {
                                atunitmap['geonim_' + street.id] = rootElementId;
                                street.id += 'g';
                            });

                            angular.forEach(regionData, function (region) {
                                region.id += 'a';
                            });
                            process((rootElement.children = regionData.concat(streetData)));
                            scope.path.push(rootElement);
                        }).error(function () {
                            $error.setError('Ошибка загрузки данных ИС АР');
                        });
                    }).error(function () {
                        $error.setError('Ошибка загрузки данных ИС АР');
                    });
                }

                // обработчик выбора элемента из списка
                function selectElement(element) {
                    if (!element) return;
                    var originalId = element.id.substring(0, element.id.length - 1);

                    tmpRegion.address.name.short = element.id;
                    tmpRegion.address.name.kk = element.nameKz;
                    tmpRegion.address.name.ru = element.nameRu;
                    tmpRegion.address.name.en = element.nameEn;

                    if (element.cato)
                        tmpRegion.address.cato.push(element.cato);

                    tmpRegion.address.type.code = element.code;
                    tmpRegion.address.name.fullKz = "";
                    tmpRegion.address.name.fullRu = "";
                    tmpRegion.address.name.fullEn = "";
                    for (var i = 0; i < scope.viewModel.selected.length; i++) {
                        tmpRegion.address.name.fullKz += scope.viewModel.selected[i].nameKz + (i !== scope.viewModel.selected.length - 1 ? ", " : "");
                        tmpRegion.address.name.fullRu += scope.viewModel.selected[i].nameRu + (i !== scope.viewModel.selected.length - 1 ? ", " : "");
                        tmpRegion.address.name.fullEn += scope.viewModel.selected[i].nameEn + (i !== scope.viewModel.selected.length - 1 ? ", " : "");
                    }
                    tmpRegion.address.name.full = tmpRegion.address.name['full' + $locales.current().capitalize()];
                    // Судя по ресту геоним необходимо искать в рамках последнего выбранного address id.
                    // Таким образом пока мы ходим в рамках atu мы берем его id чтобы иметь
                    // возможность воспользоваться последним в геониме.
                    if (typeof element.atuCount !== 'undefined') { // Ату
                        tmpRegion.address.id = originalId;
                        tmpRegion.address.geonim = null;
                    } else { // Геоним
                        tmpRegion.address.geonim = originalId;
                    }
                }

                loadRootElements();
            }
        };
    }
]);
