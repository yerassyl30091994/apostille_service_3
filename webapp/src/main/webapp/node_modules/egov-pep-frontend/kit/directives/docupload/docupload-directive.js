angular.module("app").directive("docupload", ["$http", "$session", function ($http, $session) {
    return {
        templateUrl: "kit/directives/docupload/docupload-template.html",
        restrict: "E",
        replace: true,
        scope: {
            hideOldFiles: '@',
            showDoctypeHeader: '@',
            access: '@',
            maxSize: '@',
            model: '=',
            code: '@',
            hint: '@', //текст подсказка
            typeInfo: "=",
            multiple: "@",
            checkoff: "@",
            pageSize: "@"
        },
        required: "@model",
        controller: 'inputFileCtrl',
        link: function (scope, element, attrs) {}
    };
}]).controller('inputFileCtrl', ['$scope', '$element', '$attrs', '$http', '$modal', '$dictionary', '$declaration', '$rootScope', '$session', '$error', '$translate', '$settings',
    function ($scope, $element, $attrs, $http, $modal, $dictionary, $declaration, $rootScope, $session, $error, $translate, $settings) {
        $scope.$modal = $modal;
        $scope.queryParameter = '';
        $scope.files_length = 0;
        $scope.currentPage = 1;
        $scope.itemsPerPage = $scope.pageSize || 10;
        $scope.id= guid();
        $scope.$settings = $settings;

        /*Инициализация внутренней модели когда нету данных снаружи*/
        if(typeof($scope.model) === 'undefined' || $scope.model === null){
            $scope.viewModel = {
                documentType: {},
                fileInfo: null,
                selected: {
                    documentType: null,
                    fileInfo: null,
                    id: null
                },
                code: null,
                //isLoaded: false,
                declarationFile: 'newFile'
            };
        }else if ($scope.model && $scope.model.documentId || $scope.model.length > 1) { /*Инициализация внутренней модели когда есть данные снаружи*/
            var code = $scope.model.selectedDocumentType ? $scope.model.selectedDocumentType.code : $scope.model.length > 1 ? $scope.model[0].processStatus.code : $scope.model.processStatus.code;
            $scope.viewModel = {
                documentType: {},
                fileInfo: null,
                selected: {
                    documentType: null,
                    fileInfo: {
                        documentId: $scope.model.documentId,
                        documentName: $scope.model.fileName,
                        documentType: {
                            code: code,
                            name: null
                        }
                    },
                    id: null
                },
                code: code,
                declarationFile: 'newFile'
            };
        }

        function guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                  .toString(16)
                  .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
              s4() + '-' + s4() + s4() + s4();
        }

        $scope.chooseFile = function(f) {
            $scope.viewModel.selected.fileInfo = f;
            $scope.viewModel.oldFileSelected = true;
            $scope.viewModel.oldFileSelectedDownloadUrl = f.downloadUrl;

            var data = {
                "documentId": $scope.viewModel.selected.fileInfo.documentId,
                "version": $scope.viewModel.selected.fileInfo.version,
                "fileName": $scope.viewModel.selected.fileInfo.documentName,
                "selectedDocumentType": {
                    //                    "id": "5291",
                    "nameRu": $scope.viewModel.selected.fileInfo.documentType.name.ru,
                    "nameKz": $scope.viewModel.selected.fileInfo.documentType.name.kk,
                    "code": $scope.viewModel.selected.fileInfo.documentType.code,
                    "name": $scope.viewModel.selected.fileInfo.documentType.name.ru
                }
            };
            $scope.model = data;
        };

        $scope.maxPermitSize = $scope.maxSize + ' Mb';
        if(typeof $scope.access !== "undefined"){
            $scope.permitAccess = $scope.access.split(',');
        }

        //-------Очистка модели-по кнопке Удалить/Жою---//
        $scope.clearModel = function(){
            $scope.model = null; //обнуление модели
            if (angular.element(id).length) {
                var id = '#input-file-select-' + $scope.id; //получение id элемента <input type="file">
                angular.element(id)[0].value = null; //очистка значения элемента <input type="file">
            }
        };
        //-------Очистка модели для мультипл по кнопке Удалить/Жою---//
        $scope.clearModels = function(index){
            $scope.model.splice(index, 1); //удаление файла из массива файлов
            if($scope.model.length === 1){
                $scope.model = $scope.model[0]; //если осталось только один файл то превращаем массив в объект
            }
        };

//------------------------показывает текст "Загрузите или выберите ранее загруженный файл "название типа файла из ХЭДа""---------------//
        $scope.showDocType = function () {
            return $scope.viewModel.documentType &&
                $scope.viewModel.documentType.obj && $scope.viewModel.documentType.obj.length == 1 &&
                $scope.showDoctypeHeader;
        };

        if (typeof $scope.typeInfo === 'undefined') {
            if ($scope.code) {
                //$scope.queryParameter = '?attribute=Code&value=' + parseCode($scope.code);
                $scope.queryParameter = '?attribute=Code&value=' + $scope.code;
            }

            $dictionary.linear('EDS_SCAN_DOC_TYPE' + $scope.queryParameter, function (dict, obj) {
                if(obj.items.length >= 1) {
                    $scope.viewModel.documentType.obj = obj.items;
                }else{
                    $scope.uploadError = true;
                }
            });
        } else {
            $scope.viewModel.documentType.obj = $scope.typeInfo.items;
            if ($scope.typeInfo.items.length == 1) {
                $scope.viewModel.selected.documentType = $scope.typeInfo.items[0].code;
            }
        }
//-------------------- Уотчер чекбокса выбор типа документа ------------------------//
        $scope.$watch('viewModel.selected.documentType', function () {
            $scope.viewModel.code = (($attrs.code && $attrs.code.indexOf(',') == -1 && $attrs.code.indexOf('-') == -1) ? $attrs.code : undefined) || $scope.viewModel.selected.documentType;
            if ($attrs.code && $attrs.code.indexOf(',') != -1) {
                //если коды перечислены через запятую - то пользователь может переключать типы файлов,
                // при этом нужно будет загружать с хэда ранее загруженные файлы.
                //если же код один - то перезагрузка списка ранее загруженных файлов при установке значения кода - не нужна. Поэтому тут условие.
                $scope.viewOldFiles();
            }
        });
//--------------------Уотчер чекбокса ранее загруженных-----------------------//
        $scope.$watch('viewModel.declarationFile', function(val){
            if(val == 'newFile'){
                $scope.viewModel.fileInfo = null;
            }
        });
        $scope.checkMultiple = function (element) {
          if(angular.element(element).scope().multiple=="true"){angular.element(element).attr('multiple',true)}
        };
//--------------------Функция получения ранее загруженных по $session.uin и $scope.viewModel.code-----------------------//
        $scope.viewOldFiles = function () {
            if (!!$scope.viewModel.code) {
                if ($session.uin) {
                    var json = {
                        "filters": [
                            {
                                "key": "DOCUMENT_USER_UIN",
                                "operation": "EQUALS",
                                "values": [
                                    $session.uin
                                ]
                            },
                            {
                                "key": "DOCUMENT_TYPE",
                                "operation": "IN",
                                "values": [$scope.viewModel.code]
                            }

                        ],
                        "sortOrder": [
                            {
                                "orderNum": "0",
                                "key": "DOCUMENT_ID",
                                "direction": "ASC"
                            }
                        ]
                    };
                    $http.post("rest/hed/documents-info", json).success(function (data, status, headers, config) {
                        $scope.viewModel.fileInfo = data.documentInfo;
                    }).error(function (data) {
                        if (!!$session.uin) {
                            $error.setError('docUpload.messages.noType');
                        }
                    });
                } else {
                    $error.setError("docUpload.messages.noLogin");
                }
            }
        };
//--------------------Функция проверки формата -----------------------//
        $scope.checkFormat = function (val) {
            var value = val.toLowerCase().split('.');
            var data = $scope.access.split(',');
            _.each(data, function(format){
                if(format === value[value.length-1]){
                    $scope.permission = true;
                    return false;
                }else{
                    $scope.permission = false;
                }
            });
            return $scope.permission;
        };

//-------------------- Как только выбрали, до загрузки файл обрабатывается FileReader
// $scope.files = {
//                  0: {
//                      FilelastModified: 1419337737000
//                      lastModifiedDate: Tue Dec 23 2014 18:28:57 GMT+0600 (Центральная Азия (зима))
//                      name: "Новый текстовый документ.txt"
//                      size: 3359
//                      type: "text/plain"
//                      webkitRelativePath: ""
//                     }
//                  length: 1
//                }
// -----------------------//
        $scope.sendFile = function ($element) {
            var elem = $($element);
            var files = elem[0].files
            $scope.files_length = files.length;

            var err = false;
            $scope.files = null;
            $scope.files_name = null;

            $scope.$apply(function () {
              $scope.files_name = [];
                for(var i=0;i<$scope.files_length;i++){
                    var reader = new FileReader();
                    if($scope.maxSize && files[i].size > $scope.maxSize*1048576) $scope.permitSize = true;
                    else  $scope.permitSize = false;
                    if($scope.access && !$scope.checkFormat(files[i].name)) $scope.permitFormat = true;
                    else  $scope.permitFormat = false;
                    if($scope.permitFormat==true || $scope.permitSize==true || err==true) {
                        err=true;
                        $scope.files = null;
                        $scope.files_name = null;
                        break; 
                    } else {
                        $scope.files = files;
                        $scope.files_name[i] = files[i].name;

                    }
                    reader.readAsDataURL(files[i]);
              }
                $scope.full_files_name = $scope.files_name;
                $scope.upLoadFile();
            });

        };
//--------------------Функция загрузки по кнопке загрузить файл-----------------------//
        $scope.upLoadFile = function () {
            _.each($scope.files, function (file, i) {
                var form;
                form = new FormData();
                form.append("file", file);
                form.append('document-name', encodeURI(file.name));
                form.append('document-type', $scope.viewModel.code);
                $http.post("rest/hed/upload", form, {
                    transformRequest: angular.identity,
                    headers: {
                        "Content-Type": undefined
                    }
                }).success(function (data, status, headers, config) {
                    switch (true) {
                        case !data || data.length == 0:
                            $error.setError("docUpload.messages.codeError", status + "! " + config.processingStatus());
                            break;
                        case !$session.uin:
                            $error.setError("docUpload.messages.noLogin");
                            break;
                        case status === 500:
                            $error.setError("docUpload.messages.serverError");
                            break;
                        case data.processStatus.code != 'SD-001' && data.processStatus.code != 'SD-002':
                            $error.setError('docUpload.messages.loadError', data.processStatus.code + " " + data.processStatus.message);
                            break;
                        default :

                            data.fileName = $scope.full_files_name[i];
                                //$scope.files[i].name;
                            if (typeof $scope.typeInfo === 'undefined') {
                                $dictionary.linear('EDS_SCAN_DOC_TYPE?attribute=Code&value=' + $scope.viewModel.code, function (dict, obj) {
                                    data.selectedDocumentType = obj[0];
                                    if(obj.items.length >= 1) {
                                        data.selectedDocumentType = obj[0];
                                    }else{
                                        $scope.uploadError = true;
                                    }
                                });
                            } else {
                                data.selectedDocumentType = $scope.typeInfo.items[0];
                            }
                            if($scope.files.length>1){
                                if($scope.model == null || $scope.model && "documentId" in $scope.model)$scope.model = [];
                                $scope.model[i] = data;
                            }else {
                                $scope.model = null;
                                $scope.model = data;
                            }
                            $scope.files_name = null;
                            console.log($scope.full_files_name[i] + " успешно загружен");
                    }
                }).error(function (data, status) {
                    if (!$session.uin) {
                        $error.setError("docUpload.messages.noLogin");
                    } else {
                        //$error.setError("docUpload.messages.codeError", status + "! " + data.charAt(0).toUpperCase() + data.substr(1));
                        $error.setError('TECH_ERROR');
                    }
                });
            });
        };

        $scope.$watch('model', function(val, old){
            //когда в какой-нибудь услуге очищается модель документа - компонент не очищает выбранный файл из ранее загруженных
            if (val == null && old != null) {
                $scope.clearModel();
            }
        });
    }]);
