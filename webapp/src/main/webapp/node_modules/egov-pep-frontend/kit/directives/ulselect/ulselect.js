angular.module("app").directive('ulselect', ['$uin', '$dictionary', '$declaration', '$locales', '$modal', '$rootScope', '$robot', '$error',
    function ($uin, $dictionary, $declaration, $locales, $modal, $rootScope, $robot, $error) {
        return {
            scope: {
                uin: '=bin',
                forgot: '@',
                ngTitle: '@',
                title: '@',
                ulType: '@' // ALL, MFCA, GBDUL
            },
            replace: true,
            restrict: 'E',
            transclude: true,
            templateUrl: "kit/directives/ulselect/ulselect.html",
            controller: function ($scope) {
                $scope.getValidationMessage = function () {
                    var error = _.find(_.keys($scope.viewModel.errors), function (key) {
                        return $scope.viewModel.errors[key];
                    });
                    var warning = _.find(_.keys($scope.viewModel.warnings), function (key) {
                        return $scope.viewModel.warnings[key];
                    });
                    return error && ('binSelect.error.' + error) || warning && ('binSelect.warning.' + warning);
                }
            },
            link: function (scope, element, attrs, model) {

                scope.$locales = $locales;

                if (!$uin.isBin(scope.uin)) {
                    scope.uin = "";
                }

                function reset() {
                    scope.viewModel = {
                        errors: {
                            isEmpty: false,
                            isInvalid: false,
                            isUnknown: false,
                            badStatus: false,
                            noConnection: false,
                            notMFCA: false,
                            notGBDUL: false
                        },
                        haveErrors: false,

                        warnings: {
                            lengthWarning: false
                        },
                        haveWarnings: false,

                        validationMessageMinified: false,

                        uinFocus: false,
                        info: null,

                        remoteCheckFinished: false,
                        remoteCheckError: false,

                        inputModel: scope.uin,

                        search: false
                    }
                }

                reset();

                scope.$watch("uin", function (val) {
                    val = String(val);
                    if (scope.viewModel.inputModel != val && !scope.viewModel.search) {
                        onUinChanged(val);
                    }
                });

                scope.$watch("viewModel.search", function (val) {
                    if( !val ){
                        onUinChanged(scope.uin);
                    }
                });

                function onUinChanged(val) {
                    reset();
                    scope.viewModel.inputModel = val;
                    var clearDirty = scope.inputController && _.isEmpty(val) && scope.inputController.$pristine;
                    scope.inputController && scope.inputController.$setViewValue(val);
                    scope.inputController && scope.inputController.$render();
                    if( clearDirty && scope.inputController) scope.inputController.$setPristine();
                    scope.onChange(val);
                }


                scope.$watch("viewModel.inputModel", function (val) {
                    scope.onChange(val);
                });

                scope.onChange = function (val) {
                    var model = scope.viewModel;
                    model.remoteCheckFinished = false;
                    model.remoteCheckError = false;
                    model.info = null;
                    if (validate(val)) {

                        $uin.getOrganization(val)
                            .success(function (data) {
                                model.remoteCheckFinished = true;
                                model.info = data;
                                if (validate(val)) {
                                    scope.uin = val;
                                }
                            })
                            .error(function (data, status) {
                                model.remoteCheckFinished = true;
                                if (status == '404') {
                                    $robot.wonder();
                                } else {
                                    model.remoteCheckError = true;
                                    $error.setError("binSelect.error.noConnection");
                                    $robot.connectionError();
                                }
                                validate(val);
                            })
                    }
                };

                scope.reconnect = function () {
                    var model = scope.viewModel;
                    scope.onChange(scope.inputController.$viewValue);
                };

                function validate(uin) {
                    var model = scope.viewModel,
                        errors = scope.viewModel.errors,
                        warnings = scope.viewModel.warnings;

                    var isDirty = scope.inputController && scope.inputController.$dirty;

                    errors.isEmpty = isDirty && _.isEmpty(uin);

                    var isFullLength = uin.length == 12;

                    errors.isInvalid = isDirty && !errors.isEmpty && isFullLength && !$uin.isBin(uin);
                    errors.noConnection = isDirty && !errors.isInvalid && model.remoteCheckFinished && model.remoteCheckError;
                    errors.isUnknown = isDirty && !errors.noConnection && model.remoteCheckFinished && !model.info;

                    if (scope.ulType && scope.ulType != "ALL" && isFullLength) {
                        switch (scope.ulType) {
                            case "MFCA":
                                if (scope.ulType != getUlType(uin)) {
                                    errors.notMFCA = true;
                                }
                                break;
                            case "GBDUL":
                                if (scope.ulType != getUlType(uin)) {
                                    errors.notGBDUL = true;
                                }
                                break;
                            default:
                                errors.isInvalid = true;
                        }
                    }

                    model.haveErrors = _.contains(_.values(errors), true);

                    warnings.lengthWarning = isDirty && uin && uin.length > 7 && uin.length < 12;
                    model.haveWarnings = _.contains(_.values(warnings), true);

                    return !model.haveErrors && !model.haveWarnings && isFullLength;
                };
                function getUlType(uin) {
                    if (uin.substring(6,7) == "9") {
                        return "MFCA";
                    } else {
                        return "GBDUL";
                    }
                }
            }
        }
    }
])
