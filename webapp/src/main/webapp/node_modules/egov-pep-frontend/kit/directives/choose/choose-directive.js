angular.module("app").directive('choose', ['$modal', '$declaration', '$timeout', '$settings', function ($modal, $declaration, $timeout, $settings) {

    return {
        scope: {
            values: "=",
            selected: "=",
            keyboard: "@",
            ngTitle: "@",
            title: "@",
            search:"@"
        },
        templateUrl: 'kit/directives/choose/choose-template.html',
        replace: true,
        restrict: "E",
        link: function (scope, elem, attrs) {

            scope.$settings = $settings;
            scope.PAGE_SIZE = 10;

            scope.chooseModel = {
                modalName: uid(),

                searchText: "",

                pos: 0,
                index: 0,
                sizeHistory: [],

                keys: [null],

                filtered: [],
                paged: [],
                all: [],
                inview: []
            };
            var chooseModel = scope.chooseModel;

            scope.showChoices = function () {
                $modal.show(chooseModel.modalName);
                updateList();
            };

            scope.$watch('values', function (val) {
                chooseModel.keys = _.keys(scope.values);
                chooseModel.keys.unshift(null);
                updateList();
            });
            scope.$watch(function(){
                return $modal.state;
            }, function(newValue){
                if(!!newValue) chooseModel.searchText = "";
            });
            scope.$watch('chooseModel.searchText', function (val) {
                updateList();
            });

            function updateList() {

                chooseModel.filtered = _.filter(chooseModel.keys, function (key, index) {
                    return _.isEmpty(chooseModel.searchText) || chooseModel.value(key).toLowerCase().indexOf(chooseModel.searchText.toLowerCase()) >= 0;
                });
                chooseModel.paged = _.filter(chooseModel.filtered, function (key, index) {
                    return index >= chooseModel.pos && index < (chooseModel.pos + scope.PAGE_SIZE);
                });
                chooseModel.all = _.filter(chooseModel.filtered, function (key, index) {
                    return chooseModel.value(key);
                });
                $timeout(function () {
                    var modal = $('[name=' + chooseModel.modalName + ']');//все вопросы к мише семченко (subj: модальники в руте DOM)
                    var box = $(modal.find('[clipbox]'));
                    var viewTop = 0;

                    if(box.offset() && box.offset().top)
                        viewTop = box.offset().top;

                    var viewBottom = viewTop + box.height();

                    chooseModel.inview = $(box.find('[clip]')).filter(function () {
                        var elemTop = $(this).offset().top;
                        var elemBottom = elemTop + $(this).height();
                        return elemTop >= viewTop && elemBottom <= viewBottom;
                    });

                    chooseModel.inviewSize = chooseModel.inview.length;

                    _.each(this.elems, function (elem) {
                        elem.css('visibility', !_.contains(chooseModel.inview, elem[0]) ? 'hidden' : 'visible');
                    });
                });
            }

            chooseModel.value = function (key) {
                return key ? (scope.values ? (scope.values[key] ? scope.values[key] : "") : "") : "--";
            };

            chooseModel.select = function (key) {
                scope.selected = key;
                $modal.hide(chooseModel.modalName)
            };

            chooseModel.nextPage = function () {
                chooseModel.sizeHistory[chooseModel.index] = (scope.chooseModel.inview.length - ( scope.chooseModel.inview.length <= 5 ? 0 : 1));
                chooseModel.pos = constrain(chooseModel.pos + chooseModel.sizeHistory[chooseModel.index], 0, scope.values.length);
                chooseModel.index++;
                updateList();
            };
            chooseModel.previousPage = function () {
                if (chooseModel.index == 0 || chooseModel.pos == 0) return;
                chooseModel.index--;
                chooseModel.pos = constrain(chooseModel.pos - chooseModel.sizeHistory[chooseModel.index], 0, scope.values.length);
                updateList();
            };
        }
    }
}]);