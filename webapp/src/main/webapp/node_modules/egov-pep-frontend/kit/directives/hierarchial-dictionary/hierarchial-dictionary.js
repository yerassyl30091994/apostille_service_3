// TODO Требуется рефакторинг

angular.module("app").directive("hierarchialDictionary", ['$http', '$locales', '$modal', '$declaration', '$dictionary', '$timeout',
    function ($http, $locales, $modal, $declaration, $dictionary, $timeout) {

        return {
            templateUrl: "kit/directives/hierarchial-dictionary/hierarchial-dictionary.html",
            restrict: "E",
            replace: true,
            transclude: true,
            scope:{
                type: "@",
                componentModel: "="
            },

            controller: function($scope){
            },

            link: function (scope, elm, attrs) {
                scope.$modal = $modal;

                scope.viewModel = {
                    selected: [],
                    elements: [],
                    fullData: [] //Контейнер для сбора всех данных из реста
                };
                scope.initModel = function(){
                    scope.componentModel = {
                        id: null,
                        name: {
                            full: null,
                            short: null
                        },
                        rootElement: {
                            code: null,
                            name: null,
                            serviceId: null,
                            documentId: null,
                            documentKkId: null,
                            amount: null
                        },
                        selectIsAvailable: false,
                        code: null,
                        type: null
                    };
                };
                scope.initModel();
                scope.path = [];
                scope.path.address = [];
                scope.listenIndex = 0;
                scope.rootItems = null;
                scope.currentIndex = null;
                scope.method = (scope.type === 'HIERARCHICAL_PROVINCE')?'hierarchialPep':'hierarchialLocal';

                function changeURL (change){
                    var url = '',
                        parent;

                    switch (scope.type) {
                        case 'KATO':
                        case 'TAX_STRUCTURES':
                        case 'AGRICULTURE_DEPARTMENTS':
                        case 'KNP':
                            url = 'rest/dictionary/hierarchical' + (parent = (!!change)? '?type=' + scope.type + '&parentId=' + change.id: '/' + scope.type);
                            break;

                        case 'RN':
                            url = 'rest/rn/dictionary/address/' + (parent = (!!change)?change.id:'');
                            break;

                        case 'HIERARCHICAL_PROVINCE':
                            url = 'rest/dictionary/hierarchical?type=' + scope.type + '&parentId=' + (parent = (!!change)?change.code:'');
                            break;

                        default:
                            url = 'rest/dictionary/hierarchical' + (parent = (!!change)? '?type=' + scope.type + '&parentId=' + change.id: '/' + scope.type);
                            break;

                    }
                    return url;
                }

                function loadRootElements() {
                    scope.path.push({number:scope.listenIndex});
                    scope.rootElement =
                        $dictionary[scope.method](changeURL(), function(parseResult, data, index) {
                            if (scope.type == "RN") {
                                delete parseResult[88000001001];//удаляем Казахстан из списка областей
                            }
                            if (scope.type == "BANKS_BRANCHES" || scope.type == "INSURANCE") {
                                scope.rootElement = data;
                            }
                            scope.rootItems = data;
                            scope.viewModel.elements[index] = parseResult;
                            scope.viewModel.fullData[0] = data.items;
                        }, scope.listenIndex);
                }

                scope.reset = function(index, value){
                    var dif =  scope.path.length - index;
                    scope.path.address.splice(index);
                    $dictionary.callHistory.splice(-dif,dif);
                    if(!!scope.componentModel.selectIsAvailable){
                        scope.viewModel.elements.splice(index);
                        scope.path.splice(index);
                    }else{
                        for(var prop in scope.viewModel.elements[index]){

                            if(scope.viewModel.selected[index-1] != value){
                                scope.viewModel.elements.splice(index);
                                scope.path.splice(index);
                                loadChildElements(scope.viewModel.selected[index-1]);
                            }
                            if(!scope.viewModel.selected[index]) return false;
                            scope.viewModel.elements.splice(index);
                            scope.path.splice(index);
                            break;
                        }
                    }
                    scope.viewModel.selected.splice(index);
                };

                scope.selectIndex = function(index){
                    return scope.currentIndex = index;
                };

                scope.$watch(
                    function(){
                        return scope.viewModel.selected;
                    },
                    function(newValue, oldValue){
                        // Сброс, в случае отсутвия выбора, либо повторного выбора
                        if(!scope.viewModel.selected.length
                            || newValue[scope.currentIndex] === oldValue[scope.currentIndex]
                            || !newValue[scope.currentIndex] && !oldValue[scope.currentIndex]) return false;

                        // Для всех пустых значений в случаи сброса списка либо отсутсвия выбора.
                        if(!newValue[scope.currentIndex]) {
                            scope.path.address.splice(scope.currentIndex);
                            scope.viewModel.elements.splice(scope.currentIndex > 0 ? scope.currentIndex : 1);
                            scope.path.splice(scope.currentIndex > 0 ? scope.currentIndex : 1);
                            scope.viewModel.selected.splice(scope.currentIndex);
                            scope.setComponentModel(scope.currentIndex,scope.viewModel.selected[scope.currentIndex]);
                            scope.selectIndex(scope.currentIndex-1 < 0 ? 0 : scope.currentIndex-1);
                        }

                        // Для всех изменений значения списка на одном уровне
                        if(newValue.length === oldValue.length && newValue[scope.currentIndex] !== oldValue[scope.currentIndex]) {
                            scope.path.address.splice(scope.currentIndex+1);
                            scope.viewModel.elements.splice(scope.currentIndex+1);
                            scope.path.splice(scope.currentIndex+1);
                            scope.viewModel.selected.splice(scope.currentIndex+1);
                        }

                        // Во всех иных случаях
                        loadChildElements(newValue[scope.currentIndex]);
                    },true
                );

                /*Уотчер за внешней моделью, в случае если обнуляем/уничтожаем внешнюю модель, то всю внутреннюю модель так же обнуляем*/
                scope.$watchCollection("componentModel", function(val){
                    var clear = function(){
                        scope.viewModel.selected = [];
                        scope.path = [];
                        scope.path.address = [];
                        scope.path.push({number:0});
                    };
                    if(!$declaration.isEmpty(val)){
                        if($declaration.isEmpty(val)){
                            scope.initModel();
                            clear();
                        }
                    }else{
                        scope.initModel();
                        clear();
                    }
                });

                scope.setComponentModel = function(index, select){
                    scope.initModel();
                    if(select) {
                        scope.componentModel.name.full = scope.path.address.join(', ');
                        scope.componentModel.name.short = scope.viewModel.elements[index-1][ select ];
                        scope.componentModel.id = scope.viewModel.selected[scope.viewModel.selected.length-1];
                    }
                };
                function loadChildElements(d) {
                    if(!d) return false;
                    var select = d;
                    var oneElement = false;
                    if(angular.isString(d)) d = {id: d};
                    if(scope.type === 'HIERARCHICAL_PROVINCE') d = {code: select};

                    scope.listenIndex = scope.path.length;
                    scope.path.push({number:scope.listenIndex});
                    $dictionary[scope.method](changeURL(d), function(parseResult, data, index) {
                        if(data.items.length){
                            /*Собираем данные из реста если в нем есть данные*/
                            scope.viewModel.fullData[scope.currentIndex + 1] = data.items;
                        }
                        scope.path.address[index-1] = scope.viewModel.elements[index-1][select];
                        scope.setComponentModel(index, select);

                        if (scope.currentIndex === 0) {
                            angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                if(el.id == select){
                                    scope.componentModel.code = el.code;
                                }
                            });
                        }

                        var prop;
                        for(prop in parseResult){
                            scope.viewModel.elements[index] = parseResult;
                            if (scope.viewModel.fullData.length > 0) {
                                angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                    if (el.id == select) {
                                        scope.componentModel.type = el.type;
                                    }
                                });
                            }
                            return false;
                        }
                        scope.componentModel.selectIsAvailable = !prop;
                        scope.reset(index);
                        /*Когда выбрали последнее значение мы перебираем последнее значение контейнера и ищем в нем код по выбранному id*/
                        if(scope.type !== "BANKS_BRANCHES" && scope.type !== "INSURANCE"){
                            if (scope.viewModel.fullData.length > 0) {
                                angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                    if (el.id == select) {
                                        scope.componentModel.code = el.code;
                                    }
                                });
                            } else {
                                // достаем код из массива корневых элементов
                                if (scope.rootItems) {
                                    angular.forEach(scope.rootItems.items, function (el) {
                                        if (el.id == select) {
                                            scope.componentModel.code = el.code;
                                        }
                                    });
                                }
                            }
                        }
                        if (scope.type === "RN") {
                            if (scope.viewModel.fullData.length > 0) {
                                angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                    if (el.id == select) {
                                        scope.componentModel.type = el.type;
                                    }
                                });
                            }
                        }
                        if (scope.type === "BANKS_BRANCHES") {
                            if (scope.viewModel.fullData.length > 0) {
                                angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                    if(el.id == select){
                                        scope.componentModel.code = el.code;
                                    }
                                });
                            } else {
                                oneElement = true;
                            }
                            angular.forEach(scope.rootElement.items, function(rt){
                                if(rt.id == scope.viewModel.selected[0]){
                                    scope.componentModel.rootElement.code = rt.code;
                                    scope.componentModel.rootElement.serviceId = rt.serviceId;
                                    scope.componentModel.rootElement.amount = rt.amount;
                                    scope.componentModel.rootElement.documentId = rt.documentId;
                                    scope.componentModel.rootElement.documentKkId = rt.documentKkId;
                                    if ($locales.current() === 'ru') {
                                        scope.componentModel.rootElement.name = rt.nameRu;
                                    } else {
                                        scope.componentModel.rootElement.name = rt.nameKz;
                                    }
                                    if (oneElement) {
                                        scope.componentModel.code = rt.code;
                                    }
                                }
                            });
                        }
                        if (scope.type === "INSURANCE") {
                            if (scope.viewModel.fullData.length > 0) {
                                angular.forEach(scope.viewModel.fullData[scope.currentIndex], function(el){
                                    if(el.id == select){
                                        scope.componentModel.code = el.code;
                                    }
                                });
                            } else {
                                oneElement = true;
                            }

                            angular.forEach(scope.rootElement.items, function(rt){
                                if(rt.id == scope.viewModel.selected[0]){
                                    scope.componentModel.rootElement.code = rt.code;
                                    scope.componentModel.rootElement.serviceId = rt.serviceId;
                                    if ($locales.current() === 'ru') {
                                        scope.componentModel.rootElement.name = rt.nameRu;
                                    } else {
                                        scope.componentModel.rootElement.name = rt.nameKz;
                                    }
                                    if (oneElement) {
                                        scope.componentModel.code = rt.code;
                                    }
                                }
                            });
                        }
                        console.log("element", scope.viewModel.selected);
                        return false;
                    }, scope.listenIndex);
                };
                scope.$watch(
                    function(){
                        return $locales.current();
                    },
                    function(newValue, oldValue){
                        $timeout(function(){
                            if(newValue === oldValue) return false;
                            scope.path.address = [];

                            _.each(scope.viewModel.selected, function(num, index){
                                scope.path.address.push(scope.viewModel.elements[index][num]);
                            });

                            if(!!scope.viewModel.selected[1] != true) return false;
                            scope.setComponentModel(scope.listenIndex, scope.viewModel.selected[scope.viewModel.selected.length - 1]);
                            scope.componentModel.selectIsAvailable = true;
                        },500,true);
                    },true
                );
                loadRootElements();
            }
        };
    }
]);
