angular.module("app").directive('billApprove', ['$rootScope', '$declaration', '$dictionary', '$eds', '$modal', '$session', '$http', '$q', '$zags', '$locales', '$egovMEds', '$error',
    function ($rootScope, $declaration, $dictionary, $eds, $modal, $session, $http, $q, $zags, $locales, $egovMEds, $error) {
    return {
        scope: {
            info: '=info',
            iban: '=iban',
            bank: '=bank',
            scan: '=scan',
            needMEds: '=needMEds'
        },
        replace: true,
        restrict: 'E',
        transclude: true,
        templateUrl: "kit/directives/bill-approve/bill-approve.html",
        controller: function ($scope) {
            $scope.viewModel = {
            };
            $scope.viewModel.checkIBANRequested = false;
        },
        link: function (scope, element, attrs, ngModelController) {
            scope._ = _;
            scope.$modal = $modal;
            scope.viewModel.scan = null;
            scope.viewModel.iban = null;

            scope.$watch('viewModel.scan', function(){
                scope.scan = scope.viewModel.scan;
                if(!! scope.scan){
                    scope.scan.ensiCode = "D15239";
                }
                scope.viewModel.iban = null;
            });
            scope.$watch('viewModel.iban', function(newVal, oldVal){
                scope.iban = newVal;
                if(newVal !== oldVal){
                    $declaration.model.data.infoAccount = null;
                }
            });
            scope.$watch('bank', function(){
                scope.viewModel.scan = null;
                scope.viewModel.iban = null;
                scope.info = null;
            });

            scope.viewModel.banks = $dictionary.banks('banks', function(data){
                scope.viewModel.banks = data;
            });
//            scope.$watch('scope.=info',function(value, oldValue){
//                if(value == null){
//                    scope.iban = null;
//                    if (scope.viewModel.selected) {
//                        scope.viewModel.selected.bank = null;
//                    }
//                    scope.viewModel.infoAccount = null;
//                }
//            }, true);

            scope.ibanChange = function() {
                scope.viewModel.checkIBANRequested = false;
            };

            scope.eds = function() {

                $declaration.signForBank(function () {
                    var defer = $q.defer();
                    defer.resolve();
                    $modal.hide('modal-bank');
                    return defer.promise;
                });
            };

            scope.bankSignTypeEds = function() {
                scope.bankSignType = 'eds';
                $declaration.signForBank(function () {
                    var defer = $q.defer();
                    defer.resolve();
                    $modal.hide('modal-bank2');
                    scope.bankSignType = null;
                    return defer.promise;
                });
            };

            scope.clear = function () {
                scope.bankSignType = null;
            };

            scope.bankSignTypeMeds = function () {
                $egovMEds.getPhones($session.uin);
                scope.bankSignType = 'meds';
            };

            scope.bankSendMeds = function () {
                var url = "rest/payment/iban/account-msign?serialNumber=" + $egovMEds.cert.serialNumber + "&phoneNumber=" + $egovMEds.cert.phoneNumber;
                var postData = {
                    "iin": $session.uin || cert.iin,
                    "iban": scope.iban,
                    "bankCode": scope.bank,
                    "requestNumber": $declaration.requestNum
                };

                $http.post(url, postData).success(function (data) {
                    $modal.hide('modal-bank2');
                    scope.bankSignType = null;
                    scope.viewModel.checkIBANRequested = true;
                    $declaration.requestNum = data;
                }).error(function () {
                    $error.setError('TECH_ERROR');
                });
            };

            scope.showMeds = function () {
                return scope.bankSignType == 'meds' && $egovMEds.choicePhone;
            };

            scope.getMedsPhones = function () {
                var obj = [];
                angular.forEach($egovMEds.phones, function (el) {
                    obj.push(el);
                });
                return obj;
            };

            scope.choosePhoneCert = function (phoneNumber, cert) {
                $egovMEds.cert.phoneNumber = phoneNumber;
                $egovMEds.cert.serialNumber = scope.viewModel.serialNumber = cert.subject.certificateSerialNumberStr;
            };

            scope.isPhoneCertChosen = function () {
                return !scope.viewModel.serialNumber;
            };

            scope.refreshCheckIBANStatus = function () {
                $http.get('rest/payment/iban/account-msign-results?requestNumber=' + $declaration.requestNum).success(function (data) {
                    if (data != null && data.status != null) {
                        scope.viewModel.checkIBANRequested = false;
                        if(data.status === "SYSTEM_UNAVAILABLE"){ // Система недоступена. Пожалуйста, попробуйте отправить Ваш запрос позднее
                            $error.setError("SYSTEM_UNAVAILABLE");
                        }else if(data.status === "TECH_ERROR"){ // Во время обработки запроса произошла техническая ошибка. Пожалуйста, попробуйте отправить Ваш запрос позднее
                            $error.setError("TECH_ERROR");
                        }else if(data.status === "ACCOUNT_BLOCKED"){ // Счет заблокирован
                            $error.setError("ACCOUNT_BLOCKED");
                        }else if(data.status === "ACCOUNT_CLOSED"){ // Счет закрыт
                            $error.setError("ACCOUNT_CLOSED");
                        }else if(data.status === "ACCOUNT_LIQUIDATED"){ // Счет ликвидирован
                            $error.setError("ACCOUNT_LIQUIDATED");
                        }else if(data.status === "ACCOUNT_UNAVAILABLE"){ // Не существует (данное физическое лицо отсутствует в списке клиентов банка, либо есть клиент, но счета нет)
                            $error.setError("ACCOUNT_UNAVAILABLE");
                        }else if(data.status === "EDS_PROBLEM"){ // Данные запроса не соответствуют данным в подписи
                            $error.setError("EDS_PROBLEM");
                        }else if(data.status === "WRONG_ACCOUNT_TYPE"){ // Не соответствующий тип счета
                            $error.setError("WRONG_ACCOUNT_TYPE");
                        }else if(data.status === "0"){
                            scope.viewModel.checkIBANRequested = true;
                            $declaration.model.billApproveStatus = data.status;
                            delete data.status;
                            $declaration.model.data.infoAccount = data;
                            //self.model.billApproveSignedXml = signedXml;
                            $declaration.requestId = data.requestNumber;
                            //self.goStep('infochild');
                            console.log("Данные о счете подтверждены");
                        }else{
                            $error.setError("error");
                        }
                    }
                }).error(function (rs) {
                    console.log(rs);
                });
            };

            scope.showModalBank = function() {
                if(scope.needMEds){
                    $modal.show('modal-bank2');
                } else {
                    $modal.show('modal-bank');
                    scope.eds();
                }
            };
        }
    };
}]);
