angular.module("app").directive('chooseV2', ['$modal', '$timeout', '$settings', function ($modal, $timeout, $settings) {

    return {
        scope: {
            items: "=",
            selectedItem: "=",
            textPath: "=",
            showEmptyItem: "=",
            keyboard: "@",
            ngTitle: "@",
            title: "@",
            search: "@"
        },
        templateUrl: 'kit/directives/choose-v2/choose-v2-template.html',
        replace: true,
        restrict: "E",
        link: function (scope, elem, attrs) {

            scope.$settings = $settings;

            scope.PAGE_SIZE = 10;
            scope.modalName = uid();
            scope.pos = 0;
            scope.index = 0;
            scope.sizeHistory = [];
            scope.filtered = [];
            scope.paged = [];
            scope.all = [];
            scope.inview = [];

            // текст помещен в объект из-за особенности 'scope'
            scope.searchModel = {
                text: ''
            }

            scope.showChoices = function () {
                $modal.show(scope.modalName);
                updateList();
            };

            scope.$watch('items', function () {
                if (scope.showEmptyItem)
                    scope.items.unshift(null);
                updateList();
            });

            scope.$watch(function () {
                return $modal.state;
            }, function (newValue) {
                if (!!newValue) scope.searchModel.text = '';
            });

            scope.$watch('searchModel.text', function (newVal) {
                scope.pos = 0;
                scope.index = 0;
                scope.sizeHistory = [];
                updateList();
            });

            function updateList() {
                scope.filtered = _.filter(scope.items, function (item, index) {
                    return _.isEmpty(scope.searchModel.text) || scope.getDisplayText(item).toLowerCase().indexOf(scope.searchModel.text.toLowerCase()) >= 0;
                });
                scope.paged = _.filter(scope.filtered, function (item, index) {
                    return index >= scope.pos && index < (scope.pos + scope.PAGE_SIZE);
                });
                scope.all = _.filter(scope.filtered, function (item, index) {
                    return true;
                });
                $timeout(function () {
                    var modal = $('[name=' + scope.modalName + ']');
                    var box = $(modal.find('[clipbox]'));
                    var viewTop = 0;

                    if (box.offset() && box.offset().top)
                        viewTop = box.offset().top;

                    var viewBottom = viewTop + box.height();

                    scope.inview = $(box.find('[clip]')).filter(function () {
                        var elemTop = $(this).offset().top;
                        var elemBottom = elemTop + $(this).height();
                        return elemTop >= viewTop && elemBottom <= viewBottom;
                    });

                    scope.inviewSize = scope.inview.length;

                    _.each(this.elems, function (element) {
                        element.css('visibility', !_.contains(scope.inview, element[0]) ? 'hidden' : 'visible');
                    });
                });
            }

            scope.getDisplayText = function (item) {
                return item ? item[scope.textPath] : "--";
            };

            scope.select = function (item) {
                scope.selectedItem = item;
                $modal.hide(scope.modalName);
            };

            scope.nextPage = function () {
                scope.sizeHistory[scope.index] = (scope.inview.length - (scope.inview.length <= 5 ? 0 : 1));
                scope.pos = constrain(scope.pos + scope.sizeHistory[scope.index], 0, scope.items.length);
                scope.index++;
                updateList();
            };
            scope.previousPage = function () {
                if (scope.index == 0 || scope.pos == 0) return;
                scope.index--;
                scope.pos = constrain(scope.pos - scope.sizeHistory[scope.index], 0, scope.items.length);
                updateList();
            };
        }
    }
}]);