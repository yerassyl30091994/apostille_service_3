//Глобальные определения задаются здесь

String.prototype.replaceAll = function (strTarget, strSubString) {
    var strText = this;
    var intIndexOfMatch = strText.indexOf(strTarget);
    while (intIndexOfMatch != -1) {
        strText = strText.substring(0, intIndexOfMatch) + strSubString +
            strText.substring(intIndexOfMatch + strTarget.length, strText.length);
        intIndexOfMatch = strText.indexOf(strTarget, intIndexOfMatch + strSubString.length);
    }
    return strText;
}; 

if(typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, '');
    }
}

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

function uid() {
    var result = "";
    for (var i = 0; i < 3; i++) {
        result += Math.random().toString(36).substr(2);
    }
    return result;
}

function extend(obj, mods){
    var result = _.extend({ super: _.extend({}, obj) }, obj);
    _.extend(result, mods);
    _.each(_.keys(result.super), function(key){
        if( typeof result.super[key] == 'function' ) {
            result.super[key] = _.bind(result.super[key], result);
        }
    });
    return result;
}

function error (){
    console && console.log('ERROR', arguments);
}

function warn (){
    console && console.log('WARNING', arguments);
}

function debug (){
    location.protocol == "file:" && console && console.log('DEBUG', arguments);
}

function assertDirectives($injector, directives){
    _.each(directives, function(directiveCamelCase){
        if( !$injector.has(directiveCamelCase + 'Directive') ) throw("Directive " + directiveCamelCase + " is not available.")
    });
}

//@deprecated
function parseStringBoolean(val) {
    return val == 'true';
}
function parseBoolean(val){
    return val == 'true';
}

function isEmpty(str){
    return str===null || str===undefined || str.replace(/\s/g, '') == "";
}

function _aget(name){
    return angular.element(document.body).injector().get(name);
}

function webkitForceRender(){
    $('body').css('overflow', 'hidden').height();
    $('body').css('overflow', 'auto');
}

function constrain(val, start, end){
    if( val < start ) return start;
    if( val > end ) return end;
    return val;
}

function getGet(name) {
    try {
        return decodeURIComponent(new RegExp(name + "=([^&#=]*)").exec(window.location.search)[1]);
    } catch (e) {
        return null;
    }
};

function numCase(number, titles) {  
    cases = [2, 0, 1, 1, 1, 2];  
    return titles[ (number%100>4 && number%100<20)? 2 : cases[(number%10<5)?number%10:5] ];  
};  

(function() {
    if (!window.console) {
        window.console = {};
    }
    // union of Chrome, FF, IE, and Safari console methods
    var m = [
        "log", "info", "warn", "error", "debug", "trace", "dir", "group",
        "groupCollapsed", "groupEnd", "time", "timeEnd", "profile", "profileEnd",
        "dirxml", "assert", "count", "markTimeline", "timeStamp", "clear"
    ];
    // define undefined methods as noops to prevent errors
    for (var i = 0; i < m.length; i++) {
        if (!window.console[m[i]]) {
            window.console[m[i]] = function() {};
        }
    }
})();